{"ast":null,"code":"\"use strict\";\n\nmodule.exports = function (idHandler) {\n  var eventListeners = {};\n  /**\n   * Gets all listeners for the given element.\n   * @public\n   * @param {element} element The element to get all listeners for.\n   * @returns All listeners for the given element.\n   */\n\n  function getListeners(element) {\n    var id = idHandler.get(element);\n\n    if (id === undefined) {\n      return [];\n    }\n\n    return eventListeners[id] || [];\n  }\n  /**\n   * Stores the given listener for the given element. Will not actually add the listener to the element.\n   * @public\n   * @param {element} element The element that should have the listener added.\n   * @param {function} listener The callback that the element has added.\n   */\n\n\n  function addListener(element, listener) {\n    var id = idHandler.get(element);\n\n    if (!eventListeners[id]) {\n      eventListeners[id] = [];\n    }\n\n    eventListeners[id].push(listener);\n  }\n\n  function removeListener(element, listener) {\n    var listeners = getListeners(element);\n\n    for (var i = 0, len = listeners.length; i < len; ++i) {\n      if (listeners[i] === listener) {\n        listeners.splice(i, 1);\n        break;\n      }\n    }\n  }\n\n  function removeAllListeners(element) {\n    var listeners = getListeners(element);\n\n    if (!listeners) {\n      return;\n    }\n\n    listeners.length = 0;\n  }\n\n  return {\n    get: getListeners,\n    add: addListener,\n    removeListener: removeListener,\n    removeAllListeners: removeAllListeners\n  };\n};","map":{"version":3,"sources":["/Users/jeeyoonhyun/immersive-web/node_modules/element-resize-detector/src/listener-handler.js"],"names":["module","exports","idHandler","eventListeners","getListeners","element","id","get","undefined","addListener","listener","push","removeListener","listeners","i","len","length","splice","removeAllListeners","add"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiB,UAASC,SAAT,EAAoB;AACjC,MAAIC,cAAc,GAAG,EAArB;AAEA;AACJ;AACA;AACA;AACA;AACA;;AACI,WAASC,YAAT,CAAsBC,OAAtB,EAA+B;AAC3B,QAAIC,EAAE,GAAGJ,SAAS,CAACK,GAAV,CAAcF,OAAd,CAAT;;AAEA,QAAIC,EAAE,KAAKE,SAAX,EAAsB;AAClB,aAAO,EAAP;AACH;;AAED,WAAOL,cAAc,CAACG,EAAD,CAAd,IAAsB,EAA7B;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACI,WAASG,WAAT,CAAqBJ,OAArB,EAA8BK,QAA9B,EAAwC;AACpC,QAAIJ,EAAE,GAAGJ,SAAS,CAACK,GAAV,CAAcF,OAAd,CAAT;;AAEA,QAAG,CAACF,cAAc,CAACG,EAAD,CAAlB,EAAwB;AACpBH,MAAAA,cAAc,CAACG,EAAD,CAAd,GAAqB,EAArB;AACH;;AAEDH,IAAAA,cAAc,CAACG,EAAD,CAAd,CAAmBK,IAAnB,CAAwBD,QAAxB;AACH;;AAED,WAASE,cAAT,CAAwBP,OAAxB,EAAiCK,QAAjC,EAA2C;AACvC,QAAIG,SAAS,GAAGT,YAAY,CAACC,OAAD,CAA5B;;AACA,SAAK,IAAIS,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGF,SAAS,CAACG,MAAhC,EAAwCF,CAAC,GAAGC,GAA5C,EAAiD,EAAED,CAAnD,EAAsD;AAClD,UAAID,SAAS,CAACC,CAAD,CAAT,KAAiBJ,QAArB,EAA+B;AAC7BG,QAAAA,SAAS,CAACI,MAAV,CAAiBH,CAAjB,EAAoB,CAApB;AACA;AACD;AACJ;AACJ;;AAED,WAASI,kBAAT,CAA4Bb,OAA5B,EAAqC;AACnC,QAAIQ,SAAS,GAAGT,YAAY,CAACC,OAAD,CAA5B;;AACA,QAAI,CAACQ,SAAL,EAAgB;AAAE;AAAS;;AAC3BA,IAAAA,SAAS,CAACG,MAAV,GAAmB,CAAnB;AACD;;AAED,SAAO;AACHT,IAAAA,GAAG,EAAEH,YADF;AAEHe,IAAAA,GAAG,EAAEV,WAFF;AAGHG,IAAAA,cAAc,EAAEA,cAHb;AAIHM,IAAAA,kBAAkB,EAAEA;AAJjB,GAAP;AAMH,CAzDD","sourcesContent":["\"use strict\";\n\nmodule.exports = function(idHandler) {\n    var eventListeners = {};\n\n    /**\n     * Gets all listeners for the given element.\n     * @public\n     * @param {element} element The element to get all listeners for.\n     * @returns All listeners for the given element.\n     */\n    function getListeners(element) {\n        var id = idHandler.get(element);\n\n        if (id === undefined) {\n            return [];\n        }\n\n        return eventListeners[id] || [];\n    }\n\n    /**\n     * Stores the given listener for the given element. Will not actually add the listener to the element.\n     * @public\n     * @param {element} element The element that should have the listener added.\n     * @param {function} listener The callback that the element has added.\n     */\n    function addListener(element, listener) {\n        var id = idHandler.get(element);\n\n        if(!eventListeners[id]) {\n            eventListeners[id] = [];\n        }\n\n        eventListeners[id].push(listener);\n    }\n\n    function removeListener(element, listener) {\n        var listeners = getListeners(element);\n        for (var i = 0, len = listeners.length; i < len; ++i) {\n            if (listeners[i] === listener) {\n              listeners.splice(i, 1);\n              break;\n            }\n        }\n    }\n\n    function removeAllListeners(element) {\n      var listeners = getListeners(element);\n      if (!listeners) { return; }\n      listeners.length = 0;\n    }\n\n    return {\n        get: getListeners,\n        add: addListener,\n        removeListener: removeListener,\n        removeAllListeners: removeAllListeners\n    };\n};\n"]},"metadata":{},"sourceType":"script"}