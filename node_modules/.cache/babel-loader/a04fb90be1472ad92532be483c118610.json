{"ast":null,"code":"'use strict';\n\nfunction _interopDefault(ex) {\n  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;\n}\n\nvar React = require('react');\n\nvar React__default = _interopDefault(React);\n\nvar ReactDOM = _interopDefault(require('react-dom'));\n\nvar invariant = _interopDefault(require('invariant'));\n\nvar throttleDebounce = require('throttle-debounce');\n\nvar createResizeDetector = _interopDefault(require('element-resize-detector'));\n\nvar isShallowEqual = _interopDefault(require('shallowequal'));\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nvar instances = {}; // Lazily require to not cause bug\n// https://github.com/ctrlplusb/react-sizeme/issues/6\n\nfunction resizeDetector() {\n  var strategy = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'scroll';\n\n  if (!instances[strategy]) {\n    instances[strategy] = createResizeDetector({\n      strategy: strategy\n    });\n  }\n\n  return instances[strategy];\n}\n\nvar errMsg = 'react-sizeme: an error occurred whilst stopping to listen to node size changes';\nvar defaultConfig = {\n  monitorWidth: true,\n  monitorHeight: false,\n  monitorPosition: false,\n  refreshRate: 16,\n  refreshMode: 'throttle',\n  noPlaceholder: false,\n  resizeDetectorStrategy: 'scroll'\n};\n\nfunction getDisplayName(WrappedComponent) {\n  return WrappedComponent.displayName || WrappedComponent.name || 'Component';\n}\n/**\n * This is a utility wrapper component that will allow our higher order\n * component to get a ref handle on our wrapped components html.\n * @see https://gist.github.com/jimfb/32b587ee6177665fb4cf\n */\n\n\nvar ReferenceWrapper = /*#__PURE__*/function (_Component) {\n  _inherits(ReferenceWrapper, _Component);\n\n  function ReferenceWrapper() {\n    _classCallCheck(this, ReferenceWrapper);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ReferenceWrapper).apply(this, arguments));\n  }\n\n  _createClass(ReferenceWrapper, [{\n    key: \"render\",\n    value: function render() {\n      return React.Children.only(this.props.children);\n    }\n  }]);\n\n  return ReferenceWrapper;\n}(React.Component);\n\n_defineProperty(ReferenceWrapper, \"displayName\", 'SizeMeReferenceWrapper');\n\nfunction Placeholder(_ref) {\n  var className = _ref.className,\n      style = _ref.style; // Lets create the props for the temp element.\n\n  var phProps = {}; // We will use any provided className/style or else make the temp\n  // container take the full available space.\n\n  if (!className && !style) {\n    phProps.style = {\n      width: '100%',\n      height: '100%'\n    };\n  } else {\n    if (className) {\n      phProps.className = className;\n    }\n\n    if (style) {\n      phProps.style = style;\n    }\n  }\n\n  return React__default.createElement(\"div\", phProps);\n}\n\nPlaceholder.displayName = 'SizeMePlaceholder';\n/**\n * As we need to maintain a ref on the root node that is rendered within our\n * SizeMe component we need to wrap our entire render in a sub component.\n * Without this, we lose the DOM ref after the placeholder is removed from\n * the render and the actual component is rendered.\n * It took me forever to figure this out, so tread extra careful on this one!\n */\n\nvar renderWrapper = function renderWrapper(WrappedComponent) {\n  function SizeMeRenderer(props) {\n    var explicitRef = props.explicitRef,\n        className = props.className,\n        style = props.style,\n        size = props.size,\n        disablePlaceholder = props.disablePlaceholder,\n        onSize = props.onSize,\n        restProps = _objectWithoutProperties(props, [\"explicitRef\", \"className\", \"style\", \"size\", \"disablePlaceholder\", \"onSize\"]);\n\n    var noSizeData = size == null || size.width == null && size.height == null && size.position == null;\n    var renderPlaceholder = noSizeData && !disablePlaceholder;\n    var renderProps = {\n      className: className,\n      style: style\n    };\n\n    if (size != null) {\n      renderProps.size = size;\n    }\n\n    var toRender = renderPlaceholder ? React__default.createElement(Placeholder, {\n      className: className,\n      style: style\n    }) : React__default.createElement(WrappedComponent, _extends({}, renderProps, restProps));\n    return React__default.createElement(ReferenceWrapper, {\n      ref: explicitRef\n    }, toRender);\n  }\n\n  SizeMeRenderer.displayName = \"SizeMeRenderer(\".concat(getDisplayName(WrappedComponent), \")\");\n  return SizeMeRenderer;\n};\n/**\n * :: config -> Component -> WrappedComponent\n *\n * Higher order component that allows the wrapped component to become aware\n * of it's size, by receiving it as an object within it's props.\n *\n * @param  monitorWidth\n *   Default true, whether changes in the element's width should be monitored,\n *   causing a size property to be broadcast.\n * @param  monitorHeight\n *   Default false, whether changes in the element's height should be monitored,\n *   causing a size property to be broadcast.\n *\n * @return The wrapped component.\n */\n\n\nfunction withSize() {\n  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultConfig;\n  var _config$monitorWidth = config.monitorWidth,\n      monitorWidth = _config$monitorWidth === void 0 ? defaultConfig.monitorWidth : _config$monitorWidth,\n      _config$monitorHeight = config.monitorHeight,\n      monitorHeight = _config$monitorHeight === void 0 ? defaultConfig.monitorHeight : _config$monitorHeight,\n      _config$monitorPositi = config.monitorPosition,\n      monitorPosition = _config$monitorPositi === void 0 ? defaultConfig.monitorPosition : _config$monitorPositi,\n      _config$refreshRate = config.refreshRate,\n      refreshRate = _config$refreshRate === void 0 ? defaultConfig.refreshRate : _config$refreshRate,\n      _config$refreshMode = config.refreshMode,\n      refreshMode = _config$refreshMode === void 0 ? defaultConfig.refreshMode : _config$refreshMode,\n      _config$noPlaceholder = config.noPlaceholder,\n      noPlaceholder = _config$noPlaceholder === void 0 ? defaultConfig.noPlaceholder : _config$noPlaceholder,\n      _config$resizeDetecto = config.resizeDetectorStrategy,\n      resizeDetectorStrategy = _config$resizeDetecto === void 0 ? defaultConfig.resizeDetectorStrategy : _config$resizeDetecto;\n  invariant(monitorWidth || monitorHeight || monitorPosition, 'You have to monitor at least one of the width, height, or position when using \"sizeMe\"');\n  invariant(refreshRate >= 16, \"It is highly recommended that you don't put your refreshRate lower than \" + '16 as this may cause layout thrashing.');\n  invariant(refreshMode === 'throttle' || refreshMode === 'debounce', 'The refreshMode should have a value of \"throttle\" or \"debounce\"');\n  var refreshDelayStrategy = refreshMode === 'throttle' ? throttleDebounce.throttle : throttleDebounce.debounce;\n  return function WrapComponent(WrappedComponent) {\n    var SizeMeRenderWrapper = renderWrapper(WrappedComponent);\n\n    var SizeAwareComponent = /*#__PURE__*/function (_React$Component) {\n      _inherits(SizeAwareComponent, _React$Component);\n\n      function SizeAwareComponent() {\n        var _getPrototypeOf2;\n\n        var _this;\n\n        _classCallCheck(this, SizeAwareComponent);\n\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(SizeAwareComponent)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n        _defineProperty(_assertThisInitialized(_this), \"domEl\", null);\n\n        _defineProperty(_assertThisInitialized(_this), \"state\", {\n          width: undefined,\n          height: undefined,\n          position: undefined\n        });\n\n        _defineProperty(_assertThisInitialized(_this), \"uninstall\", function () {\n          if (_this.domEl) {\n            try {\n              _this.detector.uninstall(_this.domEl);\n            } catch (err) {\n              // eslint-disable-next-line no-console\n              console.warn(errMsg);\n            }\n\n            _this.domEl = null;\n          }\n        });\n\n        _defineProperty(_assertThisInitialized(_this), \"determineStrategy\", function (props) {\n          if (props.onSize) {\n            if (!_this.callbackState) {\n              _this.callbackState = _objectSpread2({}, _this.state);\n            }\n\n            _this.strategy = 'callback';\n          } else {\n            _this.strategy = 'render';\n          }\n        });\n\n        _defineProperty(_assertThisInitialized(_this), \"strategisedSetState\", function (state) {\n          if (_this.strategy === 'callback') {\n            _this.callbackState = state;\n\n            _this.props.onSize(state);\n          }\n\n          _this.setState(state);\n        });\n\n        _defineProperty(_assertThisInitialized(_this), \"strategisedGetState\", function () {\n          return _this.strategy === 'callback' ? _this.callbackState : _this.state;\n        });\n\n        _defineProperty(_assertThisInitialized(_this), \"refCallback\", function (element) {\n          _this.element = element;\n        });\n\n        _defineProperty(_assertThisInitialized(_this), \"hasSizeChanged\", function (current, next) {\n          var c = current;\n          var n = next;\n          var cp = c.position || {};\n          var np = n.position || {};\n          return monitorWidth && c.width !== n.width || monitorHeight && c.height !== n.height || monitorPosition && (cp.top !== np.top || cp.left !== np.left || cp.bottom !== np.bottom || cp.right !== np.right);\n        });\n\n        _defineProperty(_assertThisInitialized(_this), \"checkIfSizeChanged\", refreshDelayStrategy(refreshRate, function (el) {\n          var _el$getBoundingClient = el.getBoundingClientRect(),\n              width = _el$getBoundingClient.width,\n              height = _el$getBoundingClient.height,\n              right = _el$getBoundingClient.right,\n              left = _el$getBoundingClient.left,\n              top = _el$getBoundingClient.top,\n              bottom = _el$getBoundingClient.bottom;\n\n          var next = {\n            width: monitorWidth ? width : null,\n            height: monitorHeight ? height : null,\n            position: monitorPosition ? {\n              right: right,\n              left: left,\n              top: top,\n              bottom: bottom\n            } : null\n          };\n\n          if (_this.hasSizeChanged(_this.strategisedGetState(), next)) {\n            _this.strategisedSetState(next);\n          }\n        }));\n\n        return _this;\n      }\n\n      _createClass(SizeAwareComponent, [{\n        key: \"componentDidMount\",\n        value: function componentDidMount() {\n          this.detector = resizeDetector(resizeDetectorStrategy);\n          this.determineStrategy(this.props);\n          this.handleDOMNode();\n        }\n      }, {\n        key: \"componentDidUpdate\",\n        value: function componentDidUpdate() {\n          this.determineStrategy(this.props);\n          this.handleDOMNode();\n        }\n      }, {\n        key: \"componentWillUnmount\",\n        value: function componentWillUnmount() {\n          // Change our size checker to a noop just in case we have some\n          // late running events.\n          this.hasSizeChanged = function () {\n            return undefined;\n          };\n\n          this.checkIfSizeChanged = function () {\n            return undefined;\n          };\n\n          this.uninstall();\n        }\n      }, {\n        key: \"handleDOMNode\",\n        value: function handleDOMNode() {\n          var found = this.element && ReactDOM.findDOMNode(this.element);\n\n          if (!found) {\n            // If we previously had a dom node then we need to ensure that\n            // we remove any existing listeners to avoid memory leaks.\n            this.uninstall();\n            return;\n          }\n\n          if (!this.domEl) {\n            this.domEl = found;\n            this.detector.listenTo(this.domEl, this.checkIfSizeChanged);\n          } else if (this.domEl.isSameNode && !this.domEl.isSameNode(found) || this.domEl !== found) {\n            this.uninstall();\n            this.domEl = found;\n            this.detector.listenTo(this.domEl, this.checkIfSizeChanged);\n          }\n        }\n      }, {\n        key: \"render\",\n        value: function render() {\n          var disablePlaceholder = withSize.enableSSRBehaviour || withSize.noPlaceholders || noPlaceholder || this.strategy === 'callback';\n\n          var size = _objectSpread2({}, this.state);\n\n          return React__default.createElement(SizeMeRenderWrapper, _extends({\n            explicitRef: this.refCallback,\n            size: this.strategy === 'callback' ? null : size,\n            disablePlaceholder: disablePlaceholder\n          }, this.props));\n        }\n      }]);\n\n      return SizeAwareComponent;\n    }(React__default.Component);\n\n    _defineProperty(SizeAwareComponent, \"displayName\", \"SizeMe(\".concat(getDisplayName(WrappedComponent), \")\"));\n\n    SizeAwareComponent.WrappedComponent = WrappedComponent;\n    return SizeAwareComponent;\n  };\n}\n/**\n * Allow SizeMe to run within SSR environments.  This is a \"global\" behaviour\n * flag that should be set within the initialisation phase of your application.\n *\n * Warning: don't set this flag unless you need to as using it may cause\n * extra render cycles to happen within your components depending on the logic\n * contained within them around the usage of the `size` data.\n *\n * DEPRECATED: Please use the global noPlaceholders\n */\n\n\nwithSize.enableSSRBehaviour = false;\n/**\n * Global configuration allowing to disable placeholder rendering for all\n * sizeMe components.\n */\n\nwithSize.noPlaceholders = false;\n\nvar SizeMe = /*#__PURE__*/function (_Component) {\n  _inherits(SizeMe, _Component);\n\n  function SizeMe(props) {\n    var _this;\n\n    _classCallCheck(this, SizeMe);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SizeMe).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"createComponent\", function (config) {\n      _this.SizeAware = withSize(config)(function (_ref) {\n        var children = _ref.children;\n        return children;\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSize\", function (size) {\n      return _this.setState({\n        size: size\n      });\n    });\n\n    var _children = props.children,\n        render = props.render,\n        sizeMeConfig = _objectWithoutProperties(props, [\"children\", \"render\"]);\n\n    _this.createComponent(sizeMeConfig);\n\n    _this.state = {\n      size: {\n        width: undefined,\n        height: undefined\n      }\n    };\n    return _this;\n  }\n\n  _createClass(SizeMe, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this$props = this.props,\n          prevChildren = _this$props.children,\n          prevRender = _this$props.render,\n          currentSizeMeConfig = _objectWithoutProperties(_this$props, [\"children\", \"render\"]);\n\n      var nextChildren = prevProps.children,\n          nextRender = prevProps.render,\n          prevSizeMeConfig = _objectWithoutProperties(prevProps, [\"children\", \"render\"]);\n\n      if (!isShallowEqual(currentSizeMeConfig, prevSizeMeConfig)) {\n        this.createComponent(currentSizeMeConfig);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var SizeAware = this.SizeAware;\n      var render = this.props.children || this.props.render;\n      return React__default.createElement(SizeAware, {\n        onSize: this.onSize\n      }, render({\n        size: this.state.size\n      }));\n    }\n  }]);\n\n  return SizeMe;\n}(React.Component);\n\n_defineProperty(SizeMe, \"defaultProps\", {\n  children: undefined,\n  render: undefined\n});\n\nwithSize.SizeMe = SizeMe;\nwithSize.withSize = withSize;\nmodule.exports = withSize;","map":{"version":3,"sources":["../src/resize-detector.js","../src/with-size.js","../src/component.js","../src/index.js"],"names":["instances","strategy","createResizeDetector","errMsg","defaultConfig","monitorWidth","monitorHeight","monitorPosition","refreshRate","refreshMode","noPlaceholder","resizeDetectorStrategy","WrappedComponent","ReferenceWrapper","Component","Children","className","style","phProps","width","height","React","Placeholder","renderWrapper","explicitRef","size","disablePlaceholder","onSize","restProps","props","noSizeData","renderPlaceholder","renderProps","toRender","SizeMeRenderer","getDisplayName","config","invariant","refreshDelayStrategy","throttle","debounce","SizeMeRenderWrapper","SizeAwareComponent","position","undefined","resizeDetector","console","found","ReactDOM","c","n","cp","np","right","left","top","bottom","el","next","withSize","SizeMe","children","render","sizeMeConfig","prevProps","prevChildren","prevRender","currentSizeMeConfig","nextChildren","nextRender","prevSizeMeConfig","isShallowEqual","SizeAware"],"mappings":"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","sourcesContent":["import createResizeDetector from 'element-resize-detector'\n\nconst instances = {}\n\n// Lazily require to not cause bug\n// https://github.com/ctrlplusb/react-sizeme/issues/6\nfunction resizeDetector(strategy = 'scroll') {\n  if (!instances[strategy]) {\n    instances[strategy] = createResizeDetector({\n      strategy,\n    })\n  }\n\n  return instances[strategy]\n}\n\nexport default resizeDetector\n","/* eslint-disable react/no-multi-comp */\n/* eslint-disable react/prop-types */\n/* eslint-disable react/require-default-props */\n/* eslint-disable react/no-find-dom-node */\n\nimport React, { Children, Component } from 'react'\nimport ReactDOM from 'react-dom'\nimport invariant from 'invariant'\nimport { debounce, throttle } from 'throttle-debounce'\nimport resizeDetector from './resize-detector'\n\nconst errMsg =\n  'react-sizeme: an error occurred whilst stopping to listen to node size changes'\n\nconst defaultConfig = {\n  monitorWidth: true,\n  monitorHeight: false,\n  monitorPosition: false,\n  refreshRate: 16,\n  refreshMode: 'throttle',\n  noPlaceholder: false,\n  resizeDetectorStrategy: 'scroll',\n}\n\nfunction getDisplayName(WrappedComponent) {\n  return WrappedComponent.displayName || WrappedComponent.name || 'Component'\n}\n\n/**\n * This is a utility wrapper component that will allow our higher order\n * component to get a ref handle on our wrapped components html.\n * @see https://gist.github.com/jimfb/32b587ee6177665fb4cf\n */\nclass ReferenceWrapper extends Component {\n  static displayName = 'SizeMeReferenceWrapper'\n\n  render() {\n    return Children.only(this.props.children)\n  }\n}\n\nfunction Placeholder({ className, style }) {\n  // Lets create the props for the temp element.\n  const phProps = {}\n\n  // We will use any provided className/style or else make the temp\n  // container take the full available space.\n  if (!className && !style) {\n    phProps.style = { width: '100%', height: '100%' }\n  } else {\n    if (className) {\n      phProps.className = className\n    }\n    if (style) {\n      phProps.style = style\n    }\n  }\n\n  return <div {...phProps} />\n}\nPlaceholder.displayName = 'SizeMePlaceholder'\n\n/**\n * As we need to maintain a ref on the root node that is rendered within our\n * SizeMe component we need to wrap our entire render in a sub component.\n * Without this, we lose the DOM ref after the placeholder is removed from\n * the render and the actual component is rendered.\n * It took me forever to figure this out, so tread extra careful on this one!\n */\nconst renderWrapper = WrappedComponent => {\n  function SizeMeRenderer(props) {\n    const {\n      explicitRef,\n      className,\n      style,\n      size,\n      disablePlaceholder,\n      onSize,\n      ...restProps\n    } = props\n\n    const noSizeData =\n      size == null ||\n      (size.width == null && size.height == null && size.position == null)\n\n    const renderPlaceholder = noSizeData && !disablePlaceholder\n\n    const renderProps = {\n      className,\n      style,\n    }\n\n    if (size != null) {\n      renderProps.size = size\n    }\n\n    const toRender = renderPlaceholder ? (\n      <Placeholder className={className} style={style} />\n    ) : (\n      <WrappedComponent {...renderProps} {...restProps} />\n    )\n\n    return <ReferenceWrapper ref={explicitRef}>{toRender}</ReferenceWrapper>\n  }\n\n  SizeMeRenderer.displayName = `SizeMeRenderer(${getDisplayName(\n    WrappedComponent,\n  )})`\n\n  return SizeMeRenderer\n}\n\n/**\n * :: config -> Component -> WrappedComponent\n *\n * Higher order component that allows the wrapped component to become aware\n * of it's size, by receiving it as an object within it's props.\n *\n * @param  monitorWidth\n *   Default true, whether changes in the element's width should be monitored,\n *   causing a size property to be broadcast.\n * @param  monitorHeight\n *   Default false, whether changes in the element's height should be monitored,\n *   causing a size property to be broadcast.\n *\n * @return The wrapped component.\n */\nfunction withSize(config = defaultConfig) {\n  const {\n    monitorWidth = defaultConfig.monitorWidth,\n    monitorHeight = defaultConfig.monitorHeight,\n    monitorPosition = defaultConfig.monitorPosition,\n    refreshRate = defaultConfig.refreshRate,\n    refreshMode = defaultConfig.refreshMode,\n    noPlaceholder = defaultConfig.noPlaceholder,\n    resizeDetectorStrategy = defaultConfig.resizeDetectorStrategy,\n  } = config\n\n  invariant(\n    monitorWidth || monitorHeight || monitorPosition,\n    'You have to monitor at least one of the width, height, or position when using \"sizeMe\"',\n  )\n\n  invariant(\n    refreshRate >= 16,\n    \"It is highly recommended that you don't put your refreshRate lower than \" +\n      '16 as this may cause layout thrashing.',\n  )\n\n  invariant(\n    refreshMode === 'throttle' || refreshMode === 'debounce',\n    'The refreshMode should have a value of \"throttle\" or \"debounce\"',\n  )\n\n  const refreshDelayStrategy = refreshMode === 'throttle' ? throttle : debounce\n\n  return function WrapComponent(WrappedComponent) {\n    const SizeMeRenderWrapper = renderWrapper(WrappedComponent)\n\n    class SizeAwareComponent extends React.Component {\n      static displayName = `SizeMe(${getDisplayName(WrappedComponent)})`\n\n      domEl = null\n\n      state = {\n        width: undefined,\n        height: undefined,\n        position: undefined,\n      }\n\n      componentDidMount() {\n        this.detector = resizeDetector(resizeDetectorStrategy)\n        this.determineStrategy(this.props)\n        this.handleDOMNode()\n      }\n\n      componentDidUpdate() {\n        this.determineStrategy(this.props)\n        this.handleDOMNode()\n      }\n\n      componentWillUnmount() {\n        // Change our size checker to a noop just in case we have some\n        // late running events.\n        this.hasSizeChanged = () => undefined\n        this.checkIfSizeChanged = () => undefined\n        this.uninstall()\n      }\n\n      uninstall = () => {\n        if (this.domEl) {\n          try {\n            this.detector.uninstall(this.domEl)\n          } catch (err) {\n            // eslint-disable-next-line no-console\n            console.warn(errMsg)\n          }\n          this.domEl = null\n        }\n      }\n\n      determineStrategy = props => {\n        if (props.onSize) {\n          if (!this.callbackState) {\n            this.callbackState = {\n              ...this.state,\n            }\n          }\n          this.strategy = 'callback'\n        } else {\n          this.strategy = 'render'\n        }\n      }\n\n      strategisedSetState = state => {\n        if (this.strategy === 'callback') {\n          this.callbackState = state\n          this.props.onSize(state)\n        }\n        this.setState(state)\n      }\n\n      strategisedGetState = () =>\n        this.strategy === 'callback' ? this.callbackState : this.state\n\n      handleDOMNode() {\n        const found = this.element && ReactDOM.findDOMNode(this.element)\n\n        if (!found) {\n          // If we previously had a dom node then we need to ensure that\n          // we remove any existing listeners to avoid memory leaks.\n          this.uninstall()\n          return\n        }\n\n        if (!this.domEl) {\n          this.domEl = found\n          this.detector.listenTo(this.domEl, this.checkIfSizeChanged)\n        } else if (\n          (this.domEl.isSameNode && !this.domEl.isSameNode(found)) ||\n          this.domEl !== found\n        ) {\n          this.uninstall()\n          this.domEl = found\n          this.detector.listenTo(this.domEl, this.checkIfSizeChanged)\n        } else {\n          // Do nothing 👍\n        }\n      }\n\n      refCallback = element => {\n        this.element = element\n      }\n\n      hasSizeChanged = (current, next) => {\n        const c = current\n        const n = next\n        const cp = c.position || {}\n        const np = n.position || {}\n\n        return (\n          (monitorWidth && c.width !== n.width) ||\n          (monitorHeight && c.height !== n.height) ||\n          (monitorPosition &&\n            (cp.top !== np.top ||\n              cp.left !== np.left ||\n              cp.bottom !== np.bottom ||\n              cp.right !== np.right))\n        )\n      }\n\n      checkIfSizeChanged = refreshDelayStrategy(refreshRate, el => {\n        const {\n          width,\n          height,\n          right,\n          left,\n          top,\n          bottom,\n        } = el.getBoundingClientRect()\n\n        const next = {\n          width: monitorWidth ? width : null,\n          height: monitorHeight ? height : null,\n          position: monitorPosition ? { right, left, top, bottom } : null,\n        }\n\n        if (this.hasSizeChanged(this.strategisedGetState(), next)) {\n          this.strategisedSetState(next)\n        }\n      })\n\n      render() {\n        const disablePlaceholder =\n          withSize.enableSSRBehaviour ||\n          withSize.noPlaceholders ||\n          noPlaceholder ||\n          this.strategy === 'callback'\n\n        const size = { ...this.state }\n\n        return (\n          <SizeMeRenderWrapper\n            explicitRef={this.refCallback}\n            size={this.strategy === 'callback' ? null : size}\n            disablePlaceholder={disablePlaceholder}\n            {...this.props}\n          />\n        )\n      }\n    }\n\n    SizeAwareComponent.WrappedComponent = WrappedComponent\n\n    return SizeAwareComponent\n  }\n}\n\n/**\n * Allow SizeMe to run within SSR environments.  This is a \"global\" behaviour\n * flag that should be set within the initialisation phase of your application.\n *\n * Warning: don't set this flag unless you need to as using it may cause\n * extra render cycles to happen within your components depending on the logic\n * contained within them around the usage of the `size` data.\n *\n * DEPRECATED: Please use the global noPlaceholders\n */\nwithSize.enableSSRBehaviour = false\n\n/**\n * Global configuration allowing to disable placeholder rendering for all\n * sizeMe components.\n */\nwithSize.noPlaceholders = false\n\nexport default withSize\n","/* eslint-disable react/prop-types */\n\nimport React, { Component } from 'react'\nimport isShallowEqual from 'shallowequal'\nimport withSize from './with-size'\n\nexport default class SizeMe extends Component {\n  static defaultProps = {\n    children: undefined,\n    render: undefined,\n  }\n\n  constructor(props) {\n    super(props)\n    const { children, render, ...sizeMeConfig } = props\n    this.createComponent(sizeMeConfig)\n    this.state = {\n      size: {\n        width: undefined,\n        height: undefined,\n      },\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      children: prevChildren,\n      render: prevRender,\n      ...currentSizeMeConfig\n    } = this.props\n    const {\n      children: nextChildren,\n      render: nextRender,\n      ...prevSizeMeConfig\n    } = prevProps\n    if (!isShallowEqual(currentSizeMeConfig, prevSizeMeConfig)) {\n      this.createComponent(currentSizeMeConfig)\n    }\n  }\n\n  createComponent = config => {\n    this.SizeAware = withSize(config)(({ children }) => children)\n  }\n\n  onSize = size => this.setState({ size })\n\n  render() {\n    const { SizeAware } = this\n    const render = this.props.children || this.props.render\n    return (\n      <SizeAware onSize={this.onSize}>\n        {render({ size: this.state.size })}\n      </SizeAware>\n    )\n  }\n}\n","import withSize from './with-size'\nimport SizeMe from './component'\n\nwithSize.SizeMe = SizeMe\nwithSize.withSize = withSize\n\nexport default withSize\n"]},"metadata":{},"sourceType":"script"}