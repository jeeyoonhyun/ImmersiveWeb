{"ast":null,"code":"var _jsxFileName = \"/Users/jeeyoonhyun/immersive-web/src/Pages/Day3.js\";\nimport React, { Component } from 'react';\nimport { Link } from 'react-router';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport { DirectionalLight } from 'three';\nimport * as THREE from \"three\";\nimport '../day3/style.css'; // The number of columns change by resizing the window\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Day3 extends React.Component {\n  componentDidMount() {\n    //    insert three.js code\n    // Params\n    const parameters = {\n      meshColor: 0x97cdae,\n      lightColor: 0xffffff,\n      planeColor: 0x313866,\n      deviceAlpha: 0,\n      deviceBeta: 0,\n      deviceGamma: 0\n    };\n    /**\n     * Base\n     */\n    // Canvas\n\n    const canvas = document.querySelector('canvas.webgl'); // Scene\n\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0xf1d3d3);\n    /**\n     * Object\n     */\n    // const geometry = new THREE.BoxGeometry(10, 10, 10)\n\n    const geometry = new THREE.TorusKnotGeometry(5, 1.2, 64, 16, 1, 2);\n    const material = new THREE.MeshToonMaterial({\n      color: parameters.meshColor\n    });\n    const mesh = new THREE.Mesh(geometry, material);\n    mesh.castShadow = true;\n    mesh.receiveShadow = true;\n    scene.add(mesh);\n    mesh.position.set(0, 5, 3); // Light\n    // const dirLight = new THREE.DirectionalLight( parameters.lightColor, 0.7 );\n\n    const dirLight = new THREE.DirectionalLight(0xffffff, 0.7);\n    dirLight.castShadow = true; // default false\n\n    dirLight.position.set(0, 60, 5); // adjust dirLight size\n\n    dirLight.shadowCameraLeft = -10;\n    dirLight.shadowCameraRight = 10;\n    dirLight.shadowCameraTop = 10;\n    dirLight.shadowCameraBottom = -10;\n    scene.add(dirLight); // const helper = new THREE.CameraHelper( dirLight.shadow.camera );\n    // scene.add( helper );\n\n    const ambLight = new THREE.AmbientLight(0xffffff);\n    scene.add(ambLight);\n    /**\n     * Sizes\n     */\n\n    const sizes = {\n      width: window.innerWidth,\n      height: window.innerHeight\n    };\n    window.addEventListener('resize', () => {\n      // Update sizes\n      sizes.width = window.innerWidth;\n      sizes.height = window.innerHeight; // Update camera\n\n      camera.aspect = sizes.width / sizes.height;\n      camera.updateProjectionMatrix(); // Update renderer\n\n      renderer.setSize(sizes.width, sizes.height);\n      renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n    });\n    /**\n     * Fullscreen\n     */\n\n    window.addEventListener('dblclick', () => {\n      const fullscreenElement = document.fullscreenElement || document.webkitFullscreenElement;\n\n      if (!fullscreenElement) {\n        if (canvas.requestFullscreen) {\n          canvas.requestFullscreen();\n        } else if (canvas.webkitRequestFullscreen) {\n          canvas.webkitRequestFullscreen();\n        }\n      } else {\n        if (document.exitFullscreen) {\n          document.exitFullscreen();\n        } else if (document.webkitExitFullscreen) {\n          document.webkitExitFullscreen();\n        }\n      }\n    }); // Plane for receiving shadows\n\n    const planeGeometry = new THREE.PlaneBufferGeometry(100, 100);\n    const planeMaterial = new THREE.MeshToonMaterial({\n      color: parameters.planeColor\n    }); // weird box appears in the shadows?? don't know why\n    // const planeMaterial = new THREE.MeshToonMaterial({ color: 0x313866, side: THREE.DoubleSide}); \n\n    const plane = new THREE.Mesh(planeGeometry, planeMaterial);\n    scene.add(plane);\n    plane.rotateX(-2);\n    plane.position.set(0, -20, 0); // Shadow on plane\n\n    plane.castShadow = true;\n    plane.receiveShadow = true;\n    /**\n     * Camera\n     */\n    // Base camera\n\n    const camera = new THREE.PerspectiveCamera(75, sizes.width / sizes.height, 0.1, 100);\n    camera.position.set(0, 20, 30);\n    camera.lookAt(plane.position);\n    scene.add(camera); // Controls\n\n    const controls = new OrbitControls(camera, canvas);\n    controls.enableDamping = true;\n    /**\n     * Renderer\n     */\n\n    const renderer = new THREE.WebGLRenderer({\n      canvas: canvas\n    });\n    renderer.setSize(sizes.width, sizes.height);\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2)); // Shadows\n\n    renderer.shadowMap.enabled = true;\n    renderer.shadowMap.type = THREE.PCFSoftShadowMap; // default THREE.PCFShadowMap\n    // axisHelper\n    // const axesHelper = new THREE.AxesHelper( 20 );\n    // scene.add( axesHelper );\n    // dat.gui\n    // const gui = new dat.GUI({autoPlace: true});\n    // gui.domElement.id = 'gui';\n    // let folder = gui.addFolder(`Colors`)\n    // gui\n    //     .addColor(parameters, 'meshColor')\n    //     .onChange(() =>\n    //     {\n    //         material.color.set(parameters.meshColor)\n    //     })\n    // gui\n    //     .addColor(parameters, 'lightColor')\n    //     .onChange(() =>\n    //     {\n    //         material.color.set(parameters.lightColor)\n    //     })\n\n    /**\n     * Animate\n     */\n\n    const clock = new THREE.Clock();\n\n    const getPermisson = e => {\n      e.preventDefault(); // Request permission for iOS 13+ devices\n\n      if (DeviceOrientationEvent && typeof DeviceOrientationEvent.requestPermission === \"function\") {\n        console.log(\"click event received!!\");\n        DeviceOrientationEvent.requestPermission();\n      }\n    };\n\n    const rotate = e => {\n      console.log(\"orientation event received!\");\n      var x = e.beta;\n      var y = e.alpha;\n      var z = e.gamma; // Because we don't want to have the device upside down\n      // We constrain the x value to the range [-90,90]\n\n      if (y > 90) {\n        y = 90;\n      }\n\n      if (y < -90) {\n        y = -90;\n      }\n\n      if (z > 90) {\n        z = 90;\n      }\n\n      if (z < -90) {\n        z = -90;\n      }\n\n      parameters.deviceBeta = x;\n      parameters.deviceAlpha = y;\n      parameters.deviceGamma = z;\n    }; // get device orientation when button is clicked\n\n\n    let is_running = false;\n    let button = document.getElementById(\"start\");\n\n    button.onclick = function (e) {\n      e.preventDefault();\n\n      if (is_running) {\n        scene.background = new THREE.Color(0xf1d3d3);\n        button.innerText = 'start detection'; // iOS permission\n\n        window.removeEventListener(\"click\", getPermisson);\n        window.removeEventListener(\"touchstart\", getPermisson); // device orientation\n\n        window.removeEventListener(\"deviceorientation\", rotate, true);\n        is_running = false;\n      } else {\n        scene.background = new THREE.Color(0xF2E7B3);\n        button.innerText = 'stop detection'; // iOS permission\n\n        window.addEventListener(\"click\", getPermisson);\n        window.addEventListener(\"touchstart\", getPermisson); // device orientation\n\n        window.addEventListener(\"deviceorientation\", rotate, true);\n        is_running = true;\n      }\n    };\n\n    const tick = () => {\n      // window.addEventListener(\"deviceorientation\", rotate, true);\n      const elapsedTime = clock.getElapsedTime(); // Update controls\n\n      controls.update(); // Render\n\n      renderer.render(scene, camera); // Rotation\n\n      mesh.rotation.x = parameters.deviceBeta * Math.PI / 180;\n      mesh.rotation.y = parameters.deviceAlpha * Math.PI / 180;\n      mesh.rotation.z = -parameters.deviceGamma * Math.PI / 180; // Call tick again on the next frame\n\n      window.requestAnimationFrame(tick);\n    };\n\n    tick();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          id: \"description\",\n          children: \"press button and turn your phone around\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"start\",\n          className: \"btn\",\n          href: \"#\",\n          role: \"button\",\n          children: \"start detection\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n          className: \"webgl\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Day3;","map":{"version":3,"sources":["/Users/jeeyoonhyun/immersive-web/src/Pages/Day3.js"],"names":["React","Component","Link","OrbitControls","DirectionalLight","THREE","Day3","componentDidMount","parameters","meshColor","lightColor","planeColor","deviceAlpha","deviceBeta","deviceGamma","canvas","document","querySelector","scene","Scene","background","Color","geometry","TorusKnotGeometry","material","MeshToonMaterial","color","mesh","Mesh","castShadow","receiveShadow","add","position","set","dirLight","shadowCameraLeft","shadowCameraRight","shadowCameraTop","shadowCameraBottom","ambLight","AmbientLight","sizes","width","window","innerWidth","height","innerHeight","addEventListener","camera","aspect","updateProjectionMatrix","renderer","setSize","setPixelRatio","Math","min","devicePixelRatio","fullscreenElement","webkitFullscreenElement","requestFullscreen","webkitRequestFullscreen","exitFullscreen","webkitExitFullscreen","planeGeometry","PlaneBufferGeometry","planeMaterial","plane","rotateX","PerspectiveCamera","lookAt","controls","enableDamping","WebGLRenderer","shadowMap","enabled","type","PCFSoftShadowMap","clock","Clock","getPermisson","e","preventDefault","DeviceOrientationEvent","requestPermission","console","log","rotate","x","beta","y","alpha","z","gamma","is_running","button","getElementById","onclick","innerText","removeEventListener","tick","elapsedTime","getElapsedTime","update","render","rotation","PI","requestAnimationFrame"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'react-router';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js'\nimport { DirectionalLight } from 'three'\nimport * as THREE from \"three\";\nimport '../day3/style.css'\n\n// The number of columns change by resizing the window\nclass Day3 extends React.Component {\n    componentDidMount() {\n    //    insert three.js code\n    // Params\nconst parameters = {\n    meshColor: 0x97cdae,\n    lightColor: 0xffffff,\n    planeColor: 0x313866,\n    deviceAlpha:0,\n    deviceBeta:0,\n    deviceGamma: 0,\n}\n\n/**\n * Base\n */\n// Canvas\nconst canvas = document.querySelector('canvas.webgl')\n\n// Scene\nconst scene = new THREE.Scene()\nscene.background = new THREE.Color( 0xf1d3d3 );\n\n/**\n * Object\n */\n// const geometry = new THREE.BoxGeometry(10, 10, 10)\nconst geometry = new THREE.TorusKnotGeometry( 5, 1.2, 64, 16, 1, 2 );\nconst material = new THREE.MeshToonMaterial({ color: parameters.meshColor })\nconst mesh = new THREE.Mesh(geometry, material)\nmesh.castShadow = true;\nmesh.receiveShadow = true;\nscene.add(mesh)\nmesh.position.set(0,5,3);\n\n// Light\n// const dirLight = new THREE.DirectionalLight( parameters.lightColor, 0.7 );\nconst dirLight = new THREE.DirectionalLight( 0xffffff, 0.7 );\ndirLight.castShadow = true; // default false\ndirLight.position.set(0,60,5);\n\n// adjust dirLight size\ndirLight.shadowCameraLeft = -10;\ndirLight.shadowCameraRight = 10;\ndirLight.shadowCameraTop = 10;\ndirLight.shadowCameraBottom = -10;\n\nscene.add( dirLight );\n\n// const helper = new THREE.CameraHelper( dirLight.shadow.camera );\n// scene.add( helper );\n\n\n\nconst ambLight = new THREE.AmbientLight(0xffffff);\nscene.add( ambLight );\n\n\n/**\n * Sizes\n */\nconst sizes = {\n    width: window.innerWidth,\n    height: window.innerHeight\n}\n\nwindow.addEventListener('resize', () =>\n{\n    // Update sizes\n    sizes.width = window.innerWidth\n    sizes.height = window.innerHeight\n\n    // Update camera\n    camera.aspect = sizes.width / sizes.height\n    camera.updateProjectionMatrix()\n\n    // Update renderer\n    renderer.setSize(sizes.width, sizes.height)\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\n})\n\n/**\n * Fullscreen\n */\nwindow.addEventListener('dblclick', () =>\n{\n    const fullscreenElement = document.fullscreenElement || document.webkitFullscreenElement\n\n    if(!fullscreenElement)\n    {\n        if(canvas.requestFullscreen)\n        {\n            canvas.requestFullscreen()\n        }\n        else if(canvas.webkitRequestFullscreen)\n        {\n            canvas.webkitRequestFullscreen()\n        }\n    }\n    else\n    {\n        if(document.exitFullscreen)\n        {\n            document.exitFullscreen()\n        }\n        else if(document.webkitExitFullscreen)\n        {\n            document.webkitExitFullscreen()\n        }\n    }\n})\n\n// Plane for receiving shadows\nconst planeGeometry = new THREE.PlaneBufferGeometry(100, 100);\nconst planeMaterial = new THREE.MeshToonMaterial({ color: parameters.planeColor});\n// weird box appears in the shadows?? don't know why\n// const planeMaterial = new THREE.MeshToonMaterial({ color: 0x313866, side: THREE.DoubleSide}); \nconst plane = new THREE.Mesh(planeGeometry, planeMaterial);\nscene.add(plane);\nplane.rotateX(-2);\nplane.position.set(0,-20,0);\n\n// Shadow on plane\nplane.castShadow = true;\nplane.receiveShadow = true;\n\n/**\n * Camera\n */\n// Base camera\nconst camera = new THREE.PerspectiveCamera(75, sizes.width / sizes.height, 0.1, 100)\ncamera.position.set(0,20,30);\ncamera.lookAt(plane.position);\nscene.add(camera)\n\n// Controls\nconst controls = new OrbitControls(camera, canvas)\ncontrols.enableDamping = true\n\n/**\n * Renderer\n */\nconst renderer = new THREE.WebGLRenderer({\n    canvas: canvas\n})\nrenderer.setSize(sizes.width, sizes.height)\nrenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\n\n// Shadows\nrenderer.shadowMap.enabled = true;\nrenderer.shadowMap.type = THREE.PCFSoftShadowMap; // default THREE.PCFShadowMap\n\n// axisHelper\n// const axesHelper = new THREE.AxesHelper( 20 );\n// scene.add( axesHelper );\n\n// dat.gui\n\n// const gui = new dat.GUI({autoPlace: true});\n// gui.domElement.id = 'gui';\n// let folder = gui.addFolder(`Colors`)\n// gui\n//     .addColor(parameters, 'meshColor')\n//     .onChange(() =>\n//     {\n//         material.color.set(parameters.meshColor)\n//     })\n// gui\n//     .addColor(parameters, 'lightColor')\n//     .onChange(() =>\n//     {\n//         material.color.set(parameters.lightColor)\n//     })\n\n/**\n * Animate\n */\nconst clock = new THREE.Clock()\n\nconst getPermisson = e => {\n    e.preventDefault();\n    // Request permission for iOS 13+ devices\n    if (\n        DeviceOrientationEvent &&\n        typeof DeviceOrientationEvent.requestPermission === \"function\"\n      ) {\n        console.log(\"click event received!!\")\n        DeviceOrientationEvent.requestPermission();\n    }\n}\n\nconst rotate = e => {\n    console.log(\"orientation event received!\")\n    var x = e.beta;\n    var y = e.alpha;\n    var z = e.gamma;\n\n    // Because we don't want to have the device upside down\n    // We constrain the x value to the range [-90,90]\n    if (y > 90) {\n        y = 90;\n    }\n    if (y < -90) {\n        y = -90;\n    }\n\n    if (z > 90) {\n        z = 90;\n    }\n    if (z < -90) {\n        z = -90;\n    }\n\n    parameters.deviceBeta = x;\n    parameters.deviceAlpha = y;\n    parameters.deviceGamma = z;\n}\n\n// get device orientation when button is clicked\nlet is_running = false;\nlet button = document.getElementById(\"start\");\n\nbutton.onclick = function(e) {\n    e.preventDefault();\n\n    if (is_running){\n        scene.background = new THREE.Color( 0xf1d3d3 );\n        button.innerText = 'start detection';\n        // iOS permission\n        window.removeEventListener(\"click\", getPermisson);\n        window.removeEventListener(\"touchstart\", getPermisson);\n        // device orientation\n        window.removeEventListener(\"deviceorientation\", rotate, true);\n        is_running = false;\n      }else{\n        scene.background = new THREE.Color( 0xF2E7B3 );\n        button.innerText = 'stop detection';\n        // iOS permission\n        window.addEventListener(\"click\", getPermisson);\n        window.addEventListener(\"touchstart\", getPermisson);\n        // device orientation\n        window.addEventListener(\"deviceorientation\", rotate, true);\n        is_running = true;\n      }\n\n}\nconst tick = () =>\n{\n    // window.addEventListener(\"deviceorientation\", rotate, true);\n    const elapsedTime = clock.getElapsedTime()\n\n    // Update controls\n    controls.update()\n\n    // Render\n    renderer.render(scene, camera)\n\n    // Rotation\n    mesh.rotation.x = parameters.deviceBeta * Math.PI / 180;\n    mesh.rotation.y = parameters.deviceAlpha * Math.PI / 180;\n    mesh.rotation.z = - parameters.deviceGamma * Math.PI / 180;\n    \n\n    // Call tick again on the next frame\n    window.requestAnimationFrame(tick)\n}\n\ntick()\n\n    }\n    render() {\n        return (\n            <div>\n                <div id = \"container\">\n                    <p id =\"description\">press button and turn your phone around</p>\n                    <button id=\"start\" className=\"btn\" href=\"#\" role=\"button\">start detection</button>\n                    <canvas className=\"webgl\"></canvas>\n                </div>            \n            </div>\n        )\n    }\n}\n\nexport default Day3;"]},"metadata":{},"sourceType":"module"}