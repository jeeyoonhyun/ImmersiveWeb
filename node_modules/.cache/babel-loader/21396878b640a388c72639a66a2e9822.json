{"ast":null,"code":"var _jsxFileName = \"/Users/jeeyoonhyun/immersive-web/src/Pages/day1.js\";\nimport React, { Component } from 'react';\nimport { Link } from 'react-router';\nimport '../day1/style.css';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport * as THREE from \"three\"; // The number of columns change by resizing the window\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass day1 extends React.Component {\n  componentDidMount() {\n    // three.js\n\n    /**\n    * Base\n    */\n    // Canvas\n    const canvas = document.querySelector('canvas.webgl'); // Scene\n\n    const scene = new THREE.Scene(); //light\n\n    const lightColor = \"#ffffff\";\n    const intensity = 1;\n    const light = new THREE.DirectionalLight(lightColor, intensity);\n    light.position.set(-1, 2, 4);\n    scene.add(light);\n    /**\n     * Object\n     */\n    // load font\n\n    const loader = new THREE.FontLoader();\n    const font = loader.load( // resource URL\n    './assets/day1/anthony.json', // onLoad callback\n    function (font) {\n      const color = 0x0;\n      const mat = new THREE.MeshPhysicalMaterial({\n        color: 0xffffff,\n        emissive: 0x000000,\n        transparent: true,\n        opacity: 1,\n        side: THREE.DoubleSide,\n        roughness: 0,\n        metalness: 0,\n        reflectivity: 0,\n        clearcoat: 1,\n        clearcoatRoughness: 1\n      }); // const mat = new THREE.MeshToonMaterial({\n      //     color: 0xf,\n      // })\n\n      const message = \"50 days of \\nimmersive web\"; // const shapes = font.generateShapes( message, 100 );\n      // const geometry = new THREE.ShapeGeometry( shapes );\n\n      const geometry = new THREE.TextGeometry(message, {\n        font: font,\n        size: 72,\n        height: 8,\n        curveSegments: 1,\n        bevelEnabled: true,\n        bevelThickness: 0.15,\n        bevelSize: 0.3,\n        bevelSegments: 5\n      });\n      geometry.computeBoundingBox();\n      const xMid = -0.5 * (geometry.boundingBox.max.x - geometry.boundingBox.min.x);\n      geometry.translate(xMid, 0, 0); // make shape ( N.B. edge view not visible )\n\n      const text = new THREE.Mesh(geometry, mat);\n      text.position.y = 100;\n      text.position.z = -80;\n      text.rotation.x = -1.3;\n      scene.add(text);\n    }, // onProgress callback\n    function (xhr) {\n      console.log(xhr.loaded / xhr.total * 100 + '% loaded');\n    }, // onError callback\n    function (err) {\n      console.log('An error happened');\n    }); // water\n\n    scene.background = new THREE.Color(0xffffff);\n    scene.fog = new THREE.FogExp2(0xffffff, 0.0009);\n    const worldWidth = 128,\n          worldDepth = 128;\n    let waterGeometry = new THREE.PlaneGeometry(20000, 20000, worldWidth - 1, worldDepth - 1);\n    waterGeometry.rotateX(-Math.PI / 2);\n    const position = waterGeometry.attributes.position;\n\n    for (let i = 0; i < position.count; i++) {\n      const y = 35 * Math.sin(i / 2);\n      position.setY(i, y);\n    } // const texture = new THREE.TextureLoader().load('https://live.staticflickr.com/4066/4344198258_e647f9487b_b.jpg');\n\n\n    const texture = new THREE.TextureLoader().load('./assets/day1/texture.jpeg');\n    texture.wrapS = texture.wrapT = THREE.RepeatWrapping;\n    texture.repeat.set(5, 5);\n    let waterMaterial = new THREE.MeshBasicMaterial({\n      color: 0x555555,\n      map: texture\n    });\n    let water = new THREE.Mesh(waterGeometry, waterMaterial);\n    scene.add(water);\n    /**\n     * Sizes\n     */\n\n    const sizes = {\n      width: window.innerWidth,\n      height: window.innerHeight\n    }; // Listen to the resize event\n\n    window.addEventListener('resize', () => {\n      //update size for resize\n      sizes.width = window.innerWidth;\n      sizes.height = window.innerHeight; //update camera\n\n      camera.aspect = sizes.width / sizes.height;\n      camera.updateProjectionMatrix(); //update renderer\n\n      renderer.setSize(sizes.width, sizes.height); // see https://threejs.org/docs/index.html?q=updat#manual/en/introduction/How-to-update-things\n\n      renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2)); // change pixel ratio to reduce jaggies & limit it into 2(more than 2 becomes extremely slow)\n    });\n    window.addEventListener('dblclick', () => {\n      const fullscreenElement = document.fullscreenElement || document.webkitFullscreenElement; //for safari\n\n      if (!fullscreenElement) {\n        if (canvas.requestFullscreen) {\n          canvas.requestFullscreen(); // doesn't work on Safari\n        } else if (canvas.webkitRequestFullscreen) {\n          canvas.webkitRequestFullscreen(); //for Safari\n        }\n      } else {\n        if (document.exitFullscreen) {\n          document.exitFullscreen(); //not the canvas, it is document    \n        } else if (document.webkitExitFullscreen) {\n          document.webkitExitFullscreen(); //for Safari\n        }\n      }\n    });\n    /**\n     * Camera\n     */\n    // Base camera\n\n    const camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 10000);\n    camera.position.set(0, 100, 1000);\n    scene.add(camera); // Controls\n\n    const controls = new OrbitControls(camera, canvas);\n    controls.enableDamping = true;\n    /**\n     * Renderer\n     */\n\n    const renderer = new THREE.WebGLRenderer({\n      canvas: canvas\n    });\n    renderer.setSize(sizes.width, sizes.height);\n    /**\n     * Animate\n     */\n\n    const clock = new THREE.Clock();\n\n    const tick = () => {\n      const delta = clock.getDelta();\n      const time = clock.getElapsedTime() * 10;\n      const position = waterGeometry.attributes.position;\n\n      for (let i = 0; i < position.count; i++) {\n        const y = 35 * Math.sin(i / 5 + (time + i) / 7);\n        position.setY(i, y);\n      }\n\n      position.needsUpdate = true; // controls.update( delta );\n\n      const elapsedTime = clock.getElapsedTime(); // Update controls\n\n      controls.update(); // Render\n\n      renderer.setClearColor(0xffffff, 1);\n      renderer.render(scene, camera); // Call tick again on the next frame\n\n      window.requestAnimationFrame(tick);\n    };\n\n    tick();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n        class: \"webgl\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default day1;","map":{"version":3,"sources":["/Users/jeeyoonhyun/immersive-web/src/Pages/day1.js"],"names":["React","Component","Link","OrbitControls","THREE","day1","componentDidMount","canvas","document","querySelector","scene","Scene","lightColor","intensity","light","DirectionalLight","position","set","add","loader","FontLoader","font","load","color","mat","MeshPhysicalMaterial","emissive","transparent","opacity","side","DoubleSide","roughness","metalness","reflectivity","clearcoat","clearcoatRoughness","message","geometry","TextGeometry","size","height","curveSegments","bevelEnabled","bevelThickness","bevelSize","bevelSegments","computeBoundingBox","xMid","boundingBox","max","x","min","translate","text","Mesh","y","z","rotation","xhr","console","log","loaded","total","err","background","Color","fog","FogExp2","worldWidth","worldDepth","waterGeometry","PlaneGeometry","rotateX","Math","PI","attributes","i","count","sin","setY","texture","TextureLoader","wrapS","wrapT","RepeatWrapping","repeat","waterMaterial","MeshBasicMaterial","map","water","sizes","width","window","innerWidth","innerHeight","addEventListener","camera","aspect","updateProjectionMatrix","renderer","setSize","setPixelRatio","devicePixelRatio","fullscreenElement","webkitFullscreenElement","requestFullscreen","webkitRequestFullscreen","exitFullscreen","webkitExitFullscreen","PerspectiveCamera","controls","enableDamping","WebGLRenderer","clock","Clock","tick","delta","getDelta","time","getElapsedTime","needsUpdate","elapsedTime","update","setClearColor","render","requestAnimationFrame"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'react-router';\nimport '../day1/style.css'\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js'\nimport * as THREE from \"three\";\n\n// The number of columns change by resizing the window\nclass day1 extends React.Component {\n    componentDidMount() {\n        // three.js\n        /**\n * Base\n */\n        // Canvas\n        const canvas = document.querySelector('canvas.webgl')\n\n        // Scene\n        const scene = new THREE.Scene()\n\n        //light\n        const lightColor = \"#ffffff\";\n        const intensity = 1;\n        const light = new THREE.DirectionalLight(lightColor, intensity);\n        light.position.set(-1, 2, 4);\n        scene.add(light);\n\n\n        /**\n         * Object\n         */\n\n        // load font\n        const loader = new THREE.FontLoader();\n        const font = loader.load(\n            // resource URL\n            './assets/day1/anthony.json',\n\n            // onLoad callback\n            function (font) {\n                const color = 0x0;\n\n                const mat = new THREE.MeshPhysicalMaterial({\n                    color: 0xffffff,\n                    emissive: 0x000000,\n                    transparent: true,\n                    opacity: 1,\n                    side: THREE.DoubleSide,\n                    roughness: 0,\n                    metalness: 0,\n                    reflectivity: 0,\n                    clearcoat: 1,\n                    clearcoatRoughness: 1,\n                });\n                // const mat = new THREE.MeshToonMaterial({\n                //     color: 0xf,\n                // })\n\n                const message = \"50 days of \\nimmersive web\";\n\n                // const shapes = font.generateShapes( message, 100 );\n                // const geometry = new THREE.ShapeGeometry( shapes );\n\n                const geometry = new THREE.TextGeometry(message, {\n                    font: font,\n                    size: 72,\n                    height: 8,\n                    curveSegments: 1,\n                    bevelEnabled: true,\n                    bevelThickness: 0.15,\n                    bevelSize: 0.3,\n                    bevelSegments: 5,\n                });\n\n                geometry.computeBoundingBox();\n\n                const xMid = - 0.5 * (geometry.boundingBox.max.x - geometry.boundingBox.min.x);\n\n                geometry.translate(xMid, 0, 0);\n\n                // make shape ( N.B. edge view not visible )\n\n                const text = new THREE.Mesh(geometry, mat);\n                text.position.y = 100;\n                text.position.z = -80;\n                text.rotation.x = -1.3;\n                scene.add(text);\n            },\n\n            // onProgress callback\n            function (xhr) {\n                console.log((xhr.loaded / xhr.total * 100) + '% loaded');\n            },\n\n            // onError callback\n            function (err) {\n                console.log('An error happened');\n            }\n        );\n\n        // water\n        scene.background = new THREE.Color(0xffffff);\n        scene.fog = new THREE.FogExp2(0xffffff, 0.0009);\n\n        const worldWidth = 128, worldDepth = 128;\n        let waterGeometry = new THREE.PlaneGeometry(20000, 20000, worldWidth - 1, worldDepth - 1);\n        waterGeometry.rotateX(- Math.PI / 2);\n        const position = waterGeometry.attributes.position;\n        for (let i = 0; i < position.count; i++) {\n\n            const y = 35 * Math.sin(i / 2);\n            position.setY(i, y);\n\n        }\n\n        // const texture = new THREE.TextureLoader().load('https://live.staticflickr.com/4066/4344198258_e647f9487b_b.jpg');\n        const texture = new THREE.TextureLoader().load('./assets/day1/texture.jpeg');\n        texture.wrapS = texture.wrapT = THREE.RepeatWrapping;\n        texture.repeat.set(5, 5);\n\n        let waterMaterial = new THREE.MeshBasicMaterial({ color: 0x555555, map: texture });\n        let water = new THREE.Mesh(waterGeometry, waterMaterial);\n        scene.add(water);\n\n        /**\n         * Sizes\n         */\n        const sizes = {\n            width: window.innerWidth,\n            height: window.innerHeight\n        }\n\n        // Listen to the resize event\n        window.addEventListener('resize', () => {\n            //update size for resize\n            sizes.width = window.innerWidth\n            sizes.height = window.innerHeight\n\n            //update camera\n            camera.aspect = sizes.width / sizes.height\n            camera.updateProjectionMatrix();\n\n            //update renderer\n            renderer.setSize(sizes.width, sizes.height) // see https://threejs.org/docs/index.html?q=updat#manual/en/introduction/How-to-update-things\n            renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2)); // change pixel ratio to reduce jaggies & limit it into 2(more than 2 becomes extremely slow)\n        })\n\n        window.addEventListener('dblclick', () => {\n\n            const fullscreenElement = document.fullscreenElement || document.webkitFullscreenElement //for safari\n\n            if (!fullscreenElement) {\n                if (canvas.requestFullscreen) {\n                    canvas.requestFullscreen(); // doesn't work on Safari\n                } else if (canvas.webkitRequestFullscreen) {\n                    canvas.webkitRequestFullscreen(); //for Safari\n                }\n\n            } else {\n                if (document.exitFullscreen) {\n                    document.exitFullscreen(); //not the canvas, it is document    \n                } else if (document.webkitExitFullscreen) {\n                    document.webkitExitFullscreen(); //for Safari\n                }\n\n            }\n        });\n        /**\n         * Camera\n         */\n        // Base camera\n        const camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 10000)\n        camera.position.set(0, 100, 1000);\n        scene.add(camera)\n\n\n        // Controls\n        const controls = new OrbitControls(camera, canvas)\n        controls.enableDamping = true\n\n        /**\n         * Renderer\n         */\n        const renderer = new THREE.WebGLRenderer({\n            canvas: canvas\n        })\n\n        renderer.setSize(sizes.width, sizes.height)\n\n        /**\n         * Animate\n         */\n        const clock = new THREE.Clock()\n\n        const tick = () => {\n            const delta = clock.getDelta();\n            const time = clock.getElapsedTime() * 10;\n\n            const position = waterGeometry.attributes.position;\n\n            for (let i = 0; i < position.count; i++) {\n\n                const y = 35 * Math.sin(i / 5 + (time + i) / 7);\n                position.setY(i, y);\n\n            }\n            position.needsUpdate = true;\n\n            // controls.update( delta );\n\n            const elapsedTime = clock.getElapsedTime()\n\n            // Update controls\n            controls.update()\n\n            // Render\n            renderer.setClearColor(0xffffff, 1);\n            renderer.render(scene, camera)\n\n            // Call tick again on the next frame\n            window.requestAnimationFrame(tick)\n        }\n\n        tick()\n    }\n    render() {\n        return (\n            <div>\n                <canvas class=\"webgl\"></canvas>\n            </div>\n        )\n    }\n}\n\nexport default day1;"]},"metadata":{},"sourceType":"module"}