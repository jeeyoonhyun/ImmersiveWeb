{"ast":null,"code":"import _classCallCheck from \"/Users/jeeyoonhyun/immersive-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jeeyoonhyun/immersive-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { BufferGeometry, Float32BufferAttribute, OrthographicCamera, Mesh } from 'three';\n\nvar Pass = /*#__PURE__*/function () {\n  function Pass() {\n    _classCallCheck(this, Pass);\n\n    // if set to true, the pass is processed by the composer\n    this.enabled = true; // if set to true, the pass indicates to swap read and write buffer after rendering\n\n    this.needsSwap = true; // if set to true, the pass clears its buffer before rendering\n\n    this.clear = false; // if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n\n    this.renderToScreen = false;\n  }\n\n  _createClass(Pass, [{\n    key: \"setSize\",\n    value: function setSize()\n    /* width, height */\n    {}\n  }, {\n    key: \"render\",\n    value: function render()\n    /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */\n    {\n      console.error('THREE.Pass: .render() must be implemented in derived pass.');\n    }\n  }]);\n\n  return Pass;\n}(); // Helper for passes that need to fill the viewport with a single quad.\n\n\nvar _camera = new OrthographicCamera(-1, 1, 1, -1, 0, 1); // https://github.com/mrdoob/three.js/pull/21358\n\n\nvar _geometry = new BufferGeometry();\n\n_geometry.setAttribute('position', new Float32BufferAttribute([-1, 3, 0, -1, -1, 0, 3, -1, 0], 3));\n\n_geometry.setAttribute('uv', new Float32BufferAttribute([0, 2, 0, 0, 2, 0], 2));\n\nvar FullScreenQuad = /*#__PURE__*/function () {\n  function FullScreenQuad(material) {\n    _classCallCheck(this, FullScreenQuad);\n\n    this._mesh = new Mesh(_geometry, material);\n  }\n\n  _createClass(FullScreenQuad, [{\n    key: \"dispose\",\n    value: function dispose() {\n      this._mesh.geometry.dispose();\n    }\n  }, {\n    key: \"render\",\n    value: function render(renderer) {\n      renderer.render(this._mesh, _camera);\n    }\n  }, {\n    key: \"material\",\n    get: function get() {\n      return this._mesh.material;\n    },\n    set: function set(value) {\n      this._mesh.material = value;\n    }\n  }]);\n\n  return FullScreenQuad;\n}();\n\nexport { Pass, FullScreenQuad };","map":{"version":3,"sources":["/Users/jeeyoonhyun/immersive-web/node_modules/three/examples/jsm/postprocessing/Pass.js"],"names":["BufferGeometry","Float32BufferAttribute","OrthographicCamera","Mesh","Pass","enabled","needsSwap","clear","renderToScreen","console","error","_camera","_geometry","setAttribute","FullScreenQuad","material","_mesh","geometry","dispose","renderer","render","value"],"mappings":";;AAAA,SACCA,cADD,EAECC,sBAFD,EAGCC,kBAHD,EAICC,IAJD,QAKO,OALP;;IAOMC,I;AAEL,kBAAc;AAAA;;AAEb;AACA,SAAKC,OAAL,GAAe,IAAf,CAHa,CAKb;;AACA,SAAKC,SAAL,GAAiB,IAAjB,CANa,CAQb;;AACA,SAAKC,KAAL,GAAa,KAAb,CATa,CAWb;;AACA,SAAKC,cAAL,GAAsB,KAAtB;AAEA;;;;WAED;AAAS;AAAsB,KAAE;;;WAEjC;AAAQ;AAAiE;AAExEC,MAAAA,OAAO,CAACC,KAAR,CAAe,4DAAf;AAEA;;;;KAIF;;;AAEA,IAAMC,OAAO,GAAG,IAAIT,kBAAJ,CAAwB,CAAE,CAA1B,EAA6B,CAA7B,EAAgC,CAAhC,EAAmC,CAAE,CAArC,EAAwC,CAAxC,EAA2C,CAA3C,CAAhB,C,CAEA;;;AAEA,IAAMU,SAAS,GAAG,IAAIZ,cAAJ,EAAlB;;AACAY,SAAS,CAACC,YAAV,CAAwB,UAAxB,EAAoC,IAAIZ,sBAAJ,CAA4B,CAAE,CAAE,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAE,CAAf,EAAkB,CAAE,CAApB,EAAuB,CAAvB,EAA0B,CAA1B,EAA6B,CAAE,CAA/B,EAAkC,CAAlC,CAA5B,EAAmE,CAAnE,CAApC;;AACAW,SAAS,CAACC,YAAV,CAAwB,IAAxB,EAA8B,IAAIZ,sBAAJ,CAA4B,CAAE,CAAF,EAAK,CAAL,EAAQ,CAAR,EAAW,CAAX,EAAc,CAAd,EAAiB,CAAjB,CAA5B,EAAkD,CAAlD,CAA9B;;IAEMa,c;AAEL,0BAAaC,QAAb,EAAwB;AAAA;;AAEvB,SAAKC,KAAL,GAAa,IAAIb,IAAJ,CAAUS,SAAV,EAAqBG,QAArB,CAAb;AAEA;;;;WAED,mBAAU;AAET,WAAKC,KAAL,CAAWC,QAAX,CAAoBC,OAApB;AAEA;;;WAED,gBAAQC,QAAR,EAAmB;AAElBA,MAAAA,QAAQ,CAACC,MAAT,CAAiB,KAAKJ,KAAtB,EAA6BL,OAA7B;AAEA;;;SAED,eAAe;AAEd,aAAO,KAAKK,KAAL,CAAWD,QAAlB;AAEA,K;SAED,aAAcM,KAAd,EAAsB;AAErB,WAAKL,KAAL,CAAWD,QAAX,GAAsBM,KAAtB;AAEA;;;;;;AAIF,SAASjB,IAAT,EAAeU,cAAf","sourcesContent":["import {\n\tBufferGeometry,\n\tFloat32BufferAttribute,\n\tOrthographicCamera,\n\tMesh\n} from 'three';\n\nclass Pass {\n\n\tconstructor() {\n\n\t\t// if set to true, the pass is processed by the composer\n\t\tthis.enabled = true;\n\n\t\t// if set to true, the pass indicates to swap read and write buffer after rendering\n\t\tthis.needsSwap = true;\n\n\t\t// if set to true, the pass clears its buffer before rendering\n\t\tthis.clear = false;\n\n\t\t// if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n\t\tthis.renderToScreen = false;\n\n\t}\n\n\tsetSize( /* width, height */ ) {}\n\n\trender( /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\tconsole.error( 'THREE.Pass: .render() must be implemented in derived pass.' );\n\n\t}\n\n}\n\n// Helper for passes that need to fill the viewport with a single quad.\n\nconst _camera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\n// https://github.com/mrdoob/three.js/pull/21358\n\nconst _geometry = new BufferGeometry();\n_geometry.setAttribute( 'position', new Float32BufferAttribute( [ - 1, 3, 0, - 1, - 1, 0, 3, - 1, 0 ], 3 ) );\n_geometry.setAttribute( 'uv', new Float32BufferAttribute( [ 0, 2, 0, 0, 2, 0 ], 2 ) );\n\nclass FullScreenQuad {\n\n\tconstructor( material ) {\n\n\t\tthis._mesh = new Mesh( _geometry, material );\n\n\t}\n\n\tdispose() {\n\n\t\tthis._mesh.geometry.dispose();\n\n\t}\n\n\trender( renderer ) {\n\n\t\trenderer.render( this._mesh, _camera );\n\n\t}\n\n\tget material() {\n\n\t\treturn this._mesh.material;\n\n\t}\n\n\tset material( value ) {\n\n\t\tthis._mesh.material = value;\n\n\t}\n\n}\n\nexport { Pass, FullScreenQuad };\n"]},"metadata":{},"sourceType":"module"}