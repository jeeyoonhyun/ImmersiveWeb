{"ast":null,"code":"import { Color } from 'three';\nimport { Pass } from '../postprocessing/Pass.js';\n\nclass RenderPass extends Pass {\n  constructor(scene, camera, overrideMaterial, clearColor, clearAlpha) {\n    super();\n    this.scene = scene;\n    this.camera = camera;\n    this.overrideMaterial = overrideMaterial;\n    this.clearColor = clearColor;\n    this.clearAlpha = clearAlpha !== undefined ? clearAlpha : 0;\n    this.clear = true;\n    this.clearDepth = false;\n    this.needsSwap = false;\n    this._oldClearColor = new Color();\n  }\n\n  render(renderer, writeBuffer, readBuffer\n  /*, deltaTime, maskActive */\n  ) {\n    const oldAutoClear = renderer.autoClear;\n    renderer.autoClear = false;\n    let oldClearAlpha, oldOverrideMaterial;\n\n    if (this.overrideMaterial !== undefined) {\n      oldOverrideMaterial = this.scene.overrideMaterial;\n      this.scene.overrideMaterial = this.overrideMaterial;\n    }\n\n    if (this.clearColor) {\n      renderer.getClearColor(this._oldClearColor);\n      oldClearAlpha = renderer.getClearAlpha();\n      renderer.setClearColor(this.clearColor, this.clearAlpha);\n    }\n\n    if (this.clearDepth) {\n      renderer.clearDepth();\n    }\n\n    renderer.setRenderTarget(this.renderToScreen ? null : readBuffer); // TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n\n    if (this.clear) renderer.clear(renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil);\n    renderer.render(this.scene, this.camera);\n\n    if (this.clearColor) {\n      renderer.setClearColor(this._oldClearColor, oldClearAlpha);\n    }\n\n    if (this.overrideMaterial !== undefined) {\n      this.scene.overrideMaterial = oldOverrideMaterial;\n    }\n\n    renderer.autoClear = oldAutoClear;\n  }\n\n}\n\nexport { RenderPass };","map":{"version":3,"sources":["/Users/jeeyoonhyun/immersive-web/node_modules/three/examples/jsm/postprocessing/RenderPass.js"],"names":["Color","Pass","RenderPass","constructor","scene","camera","overrideMaterial","clearColor","clearAlpha","undefined","clear","clearDepth","needsSwap","_oldClearColor","render","renderer","writeBuffer","readBuffer","oldAutoClear","autoClear","oldClearAlpha","oldOverrideMaterial","getClearColor","getClearAlpha","setClearColor","setRenderTarget","renderToScreen","autoClearColor","autoClearDepth","autoClearStencil"],"mappings":"AAAA,SACCA,KADD,QAEO,OAFP;AAGA,SAASC,IAAT,QAAqB,2BAArB;;AAEA,MAAMC,UAAN,SAAyBD,IAAzB,CAA8B;AAE7BE,EAAAA,WAAW,CAAEC,KAAF,EAASC,MAAT,EAAiBC,gBAAjB,EAAmCC,UAAnC,EAA+CC,UAA/C,EAA4D;AAEtE;AAEA,SAAKJ,KAAL,GAAaA,KAAb;AACA,SAAKC,MAAL,GAAcA,MAAd;AAEA,SAAKC,gBAAL,GAAwBA,gBAAxB;AAEA,SAAKC,UAAL,GAAkBA,UAAlB;AACA,SAAKC,UAAL,GAAoBA,UAAU,KAAKC,SAAjB,GAA+BD,UAA/B,GAA4C,CAA9D;AAEA,SAAKE,KAAL,GAAa,IAAb;AACA,SAAKC,UAAL,GAAkB,KAAlB;AACA,SAAKC,SAAL,GAAiB,KAAjB;AACA,SAAKC,cAAL,GAAsB,IAAIb,KAAJ,EAAtB;AAEA;;AAEDc,EAAAA,MAAM,CAAEC,QAAF,EAAYC,WAAZ,EAAyBC;AAAW;AAApC,IAAmE;AAExE,UAAMC,YAAY,GAAGH,QAAQ,CAACI,SAA9B;AACAJ,IAAAA,QAAQ,CAACI,SAAT,GAAqB,KAArB;AAEA,QAAIC,aAAJ,EAAmBC,mBAAnB;;AAEA,QAAK,KAAKf,gBAAL,KAA0BG,SAA/B,EAA2C;AAE1CY,MAAAA,mBAAmB,GAAG,KAAKjB,KAAL,CAAWE,gBAAjC;AAEA,WAAKF,KAAL,CAAWE,gBAAX,GAA8B,KAAKA,gBAAnC;AAEA;;AAED,QAAK,KAAKC,UAAV,EAAuB;AAEtBQ,MAAAA,QAAQ,CAACO,aAAT,CAAwB,KAAKT,cAA7B;AACAO,MAAAA,aAAa,GAAGL,QAAQ,CAACQ,aAAT,EAAhB;AAEAR,MAAAA,QAAQ,CAACS,aAAT,CAAwB,KAAKjB,UAA7B,EAAyC,KAAKC,UAA9C;AAEA;;AAED,QAAK,KAAKG,UAAV,EAAuB;AAEtBI,MAAAA,QAAQ,CAACJ,UAAT;AAEA;;AAEDI,IAAAA,QAAQ,CAACU,eAAT,CAA0B,KAAKC,cAAL,GAAsB,IAAtB,GAA6BT,UAAvD,EA9BwE,CAgCxE;;AACA,QAAK,KAAKP,KAAV,EAAkBK,QAAQ,CAACL,KAAT,CAAgBK,QAAQ,CAACY,cAAzB,EAAyCZ,QAAQ,CAACa,cAAlD,EAAkEb,QAAQ,CAACc,gBAA3E;AAClBd,IAAAA,QAAQ,CAACD,MAAT,CAAiB,KAAKV,KAAtB,EAA6B,KAAKC,MAAlC;;AAEA,QAAK,KAAKE,UAAV,EAAuB;AAEtBQ,MAAAA,QAAQ,CAACS,aAAT,CAAwB,KAAKX,cAA7B,EAA6CO,aAA7C;AAEA;;AAED,QAAK,KAAKd,gBAAL,KAA0BG,SAA/B,EAA2C;AAE1C,WAAKL,KAAL,CAAWE,gBAAX,GAA8Be,mBAA9B;AAEA;;AAEDN,IAAAA,QAAQ,CAACI,SAAT,GAAqBD,YAArB;AAEA;;AAvE4B;;AA2E9B,SAAShB,UAAT","sourcesContent":["import {\n\tColor\n} from 'three';\nimport { Pass } from '../postprocessing/Pass.js';\n\nclass RenderPass extends Pass {\n\n\tconstructor( scene, camera, overrideMaterial, clearColor, clearAlpha ) {\n\n\t\tsuper();\n\n\t\tthis.scene = scene;\n\t\tthis.camera = camera;\n\n\t\tthis.overrideMaterial = overrideMaterial;\n\n\t\tthis.clearColor = clearColor;\n\t\tthis.clearAlpha = ( clearAlpha !== undefined ) ? clearAlpha : 0;\n\n\t\tthis.clear = true;\n\t\tthis.clearDepth = false;\n\t\tthis.needsSwap = false;\n\t\tthis._oldClearColor = new Color();\n\n\t}\n\n\trender( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tconst oldAutoClear = renderer.autoClear;\n\t\trenderer.autoClear = false;\n\n\t\tlet oldClearAlpha, oldOverrideMaterial;\n\n\t\tif ( this.overrideMaterial !== undefined ) {\n\n\t\t\toldOverrideMaterial = this.scene.overrideMaterial;\n\n\t\t\tthis.scene.overrideMaterial = this.overrideMaterial;\n\n\t\t}\n\n\t\tif ( this.clearColor ) {\n\n\t\t\trenderer.getClearColor( this._oldClearColor );\n\t\t\toldClearAlpha = renderer.getClearAlpha();\n\n\t\t\trenderer.setClearColor( this.clearColor, this.clearAlpha );\n\n\t\t}\n\n\t\tif ( this.clearDepth ) {\n\n\t\t\trenderer.clearDepth();\n\n\t\t}\n\n\t\trenderer.setRenderTarget( this.renderToScreen ? null : readBuffer );\n\n\t\t// TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n\t\tif ( this.clear ) renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\t\trenderer.render( this.scene, this.camera );\n\n\t\tif ( this.clearColor ) {\n\n\t\t\trenderer.setClearColor( this._oldClearColor, oldClearAlpha );\n\n\t\t}\n\n\t\tif ( this.overrideMaterial !== undefined ) {\n\n\t\t\tthis.scene.overrideMaterial = oldOverrideMaterial;\n\n\t\t}\n\n\t\trenderer.autoClear = oldAutoClear;\n\n\t}\n\n}\n\nexport { RenderPass };\n"]},"metadata":{},"sourceType":"module"}