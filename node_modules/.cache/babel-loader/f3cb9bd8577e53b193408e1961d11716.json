{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getBrowserInformation;\n\nvar _bowser = require('bowser');\n\nvar _bowser2 = _interopRequireDefault(_bowser);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar prefixByBrowser = {\n  chrome: 'Webkit',\n  safari: 'Webkit',\n  ios: 'Webkit',\n  android: 'Webkit',\n  phantom: 'Webkit',\n  opera: 'Webkit',\n  webos: 'Webkit',\n  blackberry: 'Webkit',\n  bada: 'Webkit',\n  tizen: 'Webkit',\n  chromium: 'Webkit',\n  vivaldi: 'Webkit',\n  firefox: 'Moz',\n  seamoney: 'Moz',\n  sailfish: 'Moz',\n  msie: 'ms',\n  msedge: 'ms'\n};\nvar browserByCanIuseAlias = {\n  chrome: 'chrome',\n  chromium: 'chrome',\n  safari: 'safari',\n  firfox: 'firefox',\n  msedge: 'edge',\n  opera: 'opera',\n  vivaldi: 'opera',\n  msie: 'ie'\n};\n\nfunction getBrowserName(browserInfo) {\n  if (browserInfo.firefox) {\n    return 'firefox';\n  }\n\n  if (browserInfo.mobile || browserInfo.tablet) {\n    if (browserInfo.ios) {\n      return 'ios_saf';\n    } else if (browserInfo.android) {\n      return 'android';\n    } else if (browserInfo.opera) {\n      return 'op_mini';\n    }\n  }\n\n  for (var browser in browserByCanIuseAlias) {\n    if (browserInfo.hasOwnProperty(browser)) {\n      return browserByCanIuseAlias[browser];\n    }\n  }\n}\n/**\n * Uses bowser to get default browser browserInformation such as version and name\n * Evaluates bowser browserInfo and adds vendorPrefix browserInformation\n * @param {string} userAgent - userAgent that gets evaluated\n */\n\n\nfunction getBrowserInformation(userAgent) {\n  var browserInfo = _bowser2.default._detect(userAgent);\n\n  if (browserInfo.yandexbrowser) {\n    browserInfo = _bowser2.default._detect(userAgent.replace(/YaBrowser\\/[0-9.]*/, ''));\n  }\n\n  for (var browser in prefixByBrowser) {\n    if (browserInfo.hasOwnProperty(browser)) {\n      var prefix = prefixByBrowser[browser];\n      browserInfo.jsPrefix = prefix;\n      browserInfo.cssPrefix = '-' + prefix.toLowerCase() + '-';\n      break;\n    }\n  }\n\n  browserInfo.browserName = getBrowserName(browserInfo); // For cordova IOS 8 the version is missing, set truncated osversion to prevent NaN\n\n  if (browserInfo.version) {\n    browserInfo.browserVersion = parseFloat(browserInfo.version);\n  } else {\n    browserInfo.browserVersion = parseInt(parseFloat(browserInfo.osversion), 10);\n  }\n\n  browserInfo.osVersion = parseFloat(browserInfo.osversion); // iOS forces all browsers to use Safari under the hood\n  // as the Safari version seems to match the iOS version\n  // we just explicitely use the osversion instead\n  // https://github.com/rofrischmann/inline-style-prefixer/issues/72\n\n  if (browserInfo.browserName === 'ios_saf' && browserInfo.browserVersion > browserInfo.osVersion) {\n    browserInfo.browserVersion = browserInfo.osVersion;\n  } // seperate native android chrome\n  // https://github.com/rofrischmann/inline-style-prefixer/issues/45\n\n\n  if (browserInfo.browserName === 'android' && browserInfo.chrome && browserInfo.browserVersion > 37) {\n    browserInfo.browserName = 'and_chr';\n  } // For android < 4.4 we want to check the osversion\n  // not the chrome version, see issue #26\n  // https://github.com/rofrischmann/inline-style-prefixer/issues/26\n\n\n  if (browserInfo.browserName === 'android' && browserInfo.osVersion < 5) {\n    browserInfo.browserVersion = browserInfo.osVersion;\n  } // Samsung browser are basically build on Chrome > 44\n  // https://github.com/rofrischmann/inline-style-prefixer/issues/102\n\n\n  if (browserInfo.browserName === 'android' && browserInfo.samsungBrowser) {\n    browserInfo.browserName = 'and_chr';\n    browserInfo.browserVersion = 44;\n  }\n\n  return browserInfo;\n}\n\nmodule.exports = exports['default'];","map":{"version":3,"sources":["/Users/jeeyoonhyun/immersive-web/node_modules/inline-style-prefixer/utils/getBrowserInformation.js"],"names":["Object","defineProperty","exports","value","default","getBrowserInformation","_bowser","require","_bowser2","_interopRequireDefault","obj","__esModule","prefixByBrowser","chrome","safari","ios","android","phantom","opera","webos","blackberry","bada","tizen","chromium","vivaldi","firefox","seamoney","sailfish","msie","msedge","browserByCanIuseAlias","firfox","getBrowserName","browserInfo","mobile","tablet","browser","hasOwnProperty","userAgent","_detect","yandexbrowser","replace","prefix","jsPrefix","cssPrefix","toLowerCase","browserName","version","browserVersion","parseFloat","parseInt","osversion","osVersion","samsungBrowser","module"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getBrowserInformation;\n\nvar _bowser = require('bowser');\n\nvar _bowser2 = _interopRequireDefault(_bowser);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar prefixByBrowser = {\n  chrome: 'Webkit',\n  safari: 'Webkit',\n  ios: 'Webkit',\n  android: 'Webkit',\n  phantom: 'Webkit',\n  opera: 'Webkit',\n  webos: 'Webkit',\n  blackberry: 'Webkit',\n  bada: 'Webkit',\n  tizen: 'Webkit',\n  chromium: 'Webkit',\n  vivaldi: 'Webkit',\n  firefox: 'Moz',\n  seamoney: 'Moz',\n  sailfish: 'Moz',\n  msie: 'ms',\n  msedge: 'ms'\n};\n\n\nvar browserByCanIuseAlias = {\n  chrome: 'chrome',\n  chromium: 'chrome',\n  safari: 'safari',\n  firfox: 'firefox',\n  msedge: 'edge',\n  opera: 'opera',\n  vivaldi: 'opera',\n  msie: 'ie'\n};\n\nfunction getBrowserName(browserInfo) {\n  if (browserInfo.firefox) {\n    return 'firefox';\n  }\n\n  if (browserInfo.mobile || browserInfo.tablet) {\n    if (browserInfo.ios) {\n      return 'ios_saf';\n    } else if (browserInfo.android) {\n      return 'android';\n    } else if (browserInfo.opera) {\n      return 'op_mini';\n    }\n  }\n\n  for (var browser in browserByCanIuseAlias) {\n    if (browserInfo.hasOwnProperty(browser)) {\n      return browserByCanIuseAlias[browser];\n    }\n  }\n}\n\n/**\n * Uses bowser to get default browser browserInformation such as version and name\n * Evaluates bowser browserInfo and adds vendorPrefix browserInformation\n * @param {string} userAgent - userAgent that gets evaluated\n */\nfunction getBrowserInformation(userAgent) {\n  var browserInfo = _bowser2.default._detect(userAgent);\n\n  if (browserInfo.yandexbrowser) {\n    browserInfo = _bowser2.default._detect(userAgent.replace(/YaBrowser\\/[0-9.]*/, ''));\n  }\n\n  for (var browser in prefixByBrowser) {\n    if (browserInfo.hasOwnProperty(browser)) {\n      var prefix = prefixByBrowser[browser];\n\n      browserInfo.jsPrefix = prefix;\n      browserInfo.cssPrefix = '-' + prefix.toLowerCase() + '-';\n      break;\n    }\n  }\n\n  browserInfo.browserName = getBrowserName(browserInfo);\n\n  // For cordova IOS 8 the version is missing, set truncated osversion to prevent NaN\n  if (browserInfo.version) {\n    browserInfo.browserVersion = parseFloat(browserInfo.version);\n  } else {\n    browserInfo.browserVersion = parseInt(parseFloat(browserInfo.osversion), 10);\n  }\n\n  browserInfo.osVersion = parseFloat(browserInfo.osversion);\n\n  // iOS forces all browsers to use Safari under the hood\n  // as the Safari version seems to match the iOS version\n  // we just explicitely use the osversion instead\n  // https://github.com/rofrischmann/inline-style-prefixer/issues/72\n  if (browserInfo.browserName === 'ios_saf' && browserInfo.browserVersion > browserInfo.osVersion) {\n    browserInfo.browserVersion = browserInfo.osVersion;\n  }\n\n  // seperate native android chrome\n  // https://github.com/rofrischmann/inline-style-prefixer/issues/45\n  if (browserInfo.browserName === 'android' && browserInfo.chrome && browserInfo.browserVersion > 37) {\n    browserInfo.browserName = 'and_chr';\n  }\n\n  // For android < 4.4 we want to check the osversion\n  // not the chrome version, see issue #26\n  // https://github.com/rofrischmann/inline-style-prefixer/issues/26\n  if (browserInfo.browserName === 'android' && browserInfo.osVersion < 5) {\n    browserInfo.browserVersion = browserInfo.osVersion;\n  }\n\n  // Samsung browser are basically build on Chrome > 44\n  // https://github.com/rofrischmann/inline-style-prefixer/issues/102\n  if (browserInfo.browserName === 'android' && browserInfo.samsungBrowser) {\n    browserInfo.browserName = 'and_chr';\n    browserInfo.browserVersion = 44;\n  }\n\n  return browserInfo;\n}\nmodule.exports = exports['default'];"]},"metadata":{},"sourceType":"script"}