{"ast":null,"code":"var _jsxFileName = \"/Users/jeeyoonhyun/immersive-web/src/Pages/day1.js\";\nimport React, { Component } from 'react';\nimport { Link } from 'react-router';\nimport '../day1/style.css';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js'; // The number of columns change by resizing the window\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass day1 extends React.Component {\n  componentDidMount() {\n    // three.js\n\n    /**\n    * Base\n    */\n    // Canvas\n    const canvas = document.querySelector('canvas.webgl'); // Scene\n\n    const scene = new THREE.Scene(); //light\n\n    const lightColor = \"#ffffff\";\n    const intensity = 1;\n    const light = new THREE.DirectionalLight(lightColor, intensity);\n    light.position.set(-1, 2, 4);\n    scene.add(light);\n    /**\n     * Object\n     */\n    // load font\n\n    const loader = new THREE.FontLoader();\n    const font = loader.load( // resource URL\n    './assets/day1/anthony.json', // onLoad callback\n    function (font) {\n      const color = 0x0;\n      const mat = new THREE.MeshPhysicalMaterial({\n        color: 0xffffff,\n        emissive: 0x000000,\n        transparent: true,\n        opacity: 1,\n        side: THREE.DoubleSide,\n        roughness: 0,\n        metalness: 0,\n        reflectivity: 0,\n        clearcoat: 1,\n        clearcoatRoughness: 1\n      }); // const mat = new THREE.MeshToonMaterial({\n      //     color: 0xf,\n      // })\n\n      const message = \"50 days of \\nimmersive web\"; // const shapes = font.generateShapes( message, 100 );\n      // const geometry = new THREE.ShapeGeometry( shapes );\n\n      const geometry = new THREE.TextGeometry(message, {\n        font: font,\n        size: 72,\n        height: 8,\n        curveSegments: 1,\n        bevelEnabled: true,\n        bevelThickness: 0.15,\n        bevelSize: 0.3,\n        bevelSegments: 5\n      });\n      geometry.computeBoundingBox();\n      const xMid = -0.5 * (geometry.boundingBox.max.x - geometry.boundingBox.min.x);\n      geometry.translate(xMid, 0, 0); // make shape ( N.B. edge view not visible )\n\n      const text = new THREE.Mesh(geometry, mat);\n      text.position.y = 100;\n      text.position.z = -80;\n      text.rotation.x = -1.3;\n      scene.add(text);\n    }, // onProgress callback\n    function (xhr) {\n      console.log(xhr.loaded / xhr.total * 100 + '% loaded');\n    }, // onError callback\n    function (err) {\n      console.log('An error happened');\n    }); // water\n\n    scene.background = new THREE.Color(0xffffff);\n    scene.fog = new THREE.FogExp2(0xffffff, 0.0009);\n    const worldWidth = 128,\n          worldDepth = 128;\n    let waterGeometry = new THREE.PlaneGeometry(20000, 20000, worldWidth - 1, worldDepth - 1);\n    waterGeometry.rotateX(-Math.PI / 2);\n    const position = waterGeometry.attributes.position;\n\n    for (let i = 0; i < position.count; i++) {\n      const y = 35 * Math.sin(i / 2);\n      position.setY(i, y);\n    } // const texture = new THREE.TextureLoader().load('https://live.staticflickr.com/4066/4344198258_e647f9487b_b.jpg');\n\n\n    const texture = new THREE.TextureLoader().load('./assets/day1/texture.jpeg');\n    texture.wrapS = texture.wrapT = THREE.RepeatWrapping;\n    texture.repeat.set(5, 5);\n    let waterMaterial = new THREE.MeshBasicMaterial({\n      color: 0x555555,\n      map: texture\n    });\n    let water = new THREE.Mesh(waterGeometry, waterMaterial);\n    scene.add(water);\n    /**\n     * Sizes\n     */\n\n    const sizes = {\n      width: window.innerWidth,\n      height: window.innerHeight\n    }; // Listen to the resize event\n\n    window.addEventListener('resize', () => {\n      //update size for resize\n      sizes.width = window.innerWidth;\n      sizes.height = window.innerHeight; //update camera\n\n      camera.aspect = sizes.width / sizes.height;\n      camera.updateProjectionMatrix(); //update renderer\n\n      renderer.setSize(sizes.width, sizes.height); // see https://threejs.org/docs/index.html?q=updat#manual/en/introduction/How-to-update-things\n\n      renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2)); // change pixel ratio to reduce jaggies & limit it into 2(more than 2 becomes extremely slow)\n    });\n    window.addEventListener('dblclick', () => {\n      const fullscreenElement = document.fullscreenElement || document.webkitFullscreenElement; //for safari\n\n      if (!fullscreenElement) {\n        if (canvas.requestFullscreen) {\n          canvas.requestFullscreen(); // doesn't work on Safari\n        } else if (canvas.webkitRequestFullscreen) {\n          canvas.webkitRequestFullscreen(); //for Safari\n        }\n      } else {\n        if (document.exitFullscreen) {\n          document.exitFullscreen(); //not the canvas, it is document    \n        } else if (document.webkitExitFullscreen) {\n          document.webkitExitFullscreen(); //for Safari\n        }\n      }\n    });\n    /**\n     * Camera\n     */\n    // Base camera\n\n    const camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 10000);\n    camera.position.set(0, 100, 1000);\n    scene.add(camera); // Controls\n\n    const controls = new OrbitControls(camera, canvas);\n    controls.enableDamping = true;\n    /**\n     * Renderer\n     */\n\n    const renderer = new THREE.WebGLRenderer({\n      canvas: canvas\n    });\n    renderer.setSize(sizes.width, sizes.height);\n    /**\n     * Animate\n     */\n\n    const clock = new THREE.Clock();\n\n    const tick = () => {\n      const delta = clock.getDelta();\n      const time = clock.getElapsedTime() * 10;\n      const position = waterGeometry.attributes.position;\n\n      for (let i = 0; i < position.count; i++) {\n        const y = 35 * Math.sin(i / 5 + (time + i) / 7);\n        position.setY(i, y);\n      }\n\n      position.needsUpdate = true; // controls.update( delta );\n\n      const elapsedTime = clock.getElapsedTime(); // Update controls\n\n      controls.update(); // Render\n\n      renderer.setClearColor(0xffffff, 1);\n      renderer.render(scene, camera); // Call tick again on the next frame\n\n      window.requestAnimationFrame(tick);\n    };\n\n    tick();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n        class: \"webgl\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default day1;","map":{"version":3,"sources":["/Users/jeeyoonhyun/immersive-web/src/Pages/day1.js"],"names":["React","Component","Link","OrbitControls","day1","componentDidMount","canvas","document","querySelector","scene","THREE","Scene","lightColor","intensity","light","DirectionalLight","position","set","add","loader","FontLoader","font","load","color","mat","MeshPhysicalMaterial","emissive","transparent","opacity","side","DoubleSide","roughness","metalness","reflectivity","clearcoat","clearcoatRoughness","message","geometry","TextGeometry","size","height","curveSegments","bevelEnabled","bevelThickness","bevelSize","bevelSegments","computeBoundingBox","xMid","boundingBox","max","x","min","translate","text","Mesh","y","z","rotation","xhr","console","log","loaded","total","err","background","Color","fog","FogExp2","worldWidth","worldDepth","waterGeometry","PlaneGeometry","rotateX","Math","PI","attributes","i","count","sin","setY","texture","TextureLoader","wrapS","wrapT","RepeatWrapping","repeat","waterMaterial","MeshBasicMaterial","map","water","sizes","width","window","innerWidth","innerHeight","addEventListener","camera","aspect","updateProjectionMatrix","renderer","setSize","setPixelRatio","devicePixelRatio","fullscreenElement","webkitFullscreenElement","requestFullscreen","webkitRequestFullscreen","exitFullscreen","webkitExitFullscreen","PerspectiveCamera","controls","enableDamping","WebGLRenderer","clock","Clock","tick","delta","getDelta","time","getElapsedTime","needsUpdate","elapsedTime","update","setClearColor","render","requestAnimationFrame"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'react-router';\nimport '../day1/style.css'\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js'\n\n// The number of columns change by resizing the window\nclass day1 extends React.Component {\n    componentDidMount(){\n        // three.js\n        /**\n * Base\n */\n// Canvas\nconst canvas = document.querySelector('canvas.webgl')\n\n// Scene\nconst scene = new THREE.Scene()\n\n//light\nconst lightColor = \"#ffffff\";\nconst intensity = 1;\nconst light = new THREE.DirectionalLight(lightColor, intensity);\nlight.position.set(-1, 2, 4);\nscene.add(light);\n\n\n/**\n * Object\n */\n\n// load font\nconst loader = new THREE.FontLoader();\nconst font = loader.load(\n    // resource URL\n    './assets/day1/anthony.json',\n\n    // onLoad callback\n    function (font) {\n        const color = 0x0;\n\n        const mat = new THREE.MeshPhysicalMaterial({\n            color: 0xffffff,\n            emissive: 0x000000,\n            transparent: true,\n            opacity: 1,\n            side: THREE.DoubleSide,\n            roughness: 0,\n            metalness: 0,\n            reflectivity: 0,\n            clearcoat: 1,\n            clearcoatRoughness: 1,\n        });\n        // const mat = new THREE.MeshToonMaterial({\n        //     color: 0xf,\n        // })\n\n        const message = \"50 days of \\nimmersive web\";\n\n        // const shapes = font.generateShapes( message, 100 );\n        // const geometry = new THREE.ShapeGeometry( shapes );\n\n        const geometry = new THREE.TextGeometry(message, {\n            font: font,\n            size: 72,\n            height: 8,\n            curveSegments: 1,\n            bevelEnabled: true,\n            bevelThickness: 0.15,\n            bevelSize: 0.3,\n            bevelSegments: 5,\n        });\n\n        geometry.computeBoundingBox();\n\n        const xMid = - 0.5 * (geometry.boundingBox.max.x - geometry.boundingBox.min.x);\n\n        geometry.translate(xMid, 0, 0);\n\n        // make shape ( N.B. edge view not visible )\n\n        const text = new THREE.Mesh(geometry, mat);\n        text.position.y = 100;\n        text.position.z = -80;\n        text.rotation.x = -1.3;\n        scene.add(text);\n    },\n\n    // onProgress callback\n    function (xhr) {\n        console.log((xhr.loaded / xhr.total * 100) + '% loaded');\n    },\n\n    // onError callback\n    function (err) {\n        console.log('An error happened');\n    }\n);\n\n// water\nscene.background = new THREE.Color(0xffffff);\nscene.fog = new THREE.FogExp2(0xffffff, 0.0009);\n\nconst worldWidth = 128, worldDepth = 128;\nlet waterGeometry = new THREE.PlaneGeometry(20000, 20000, worldWidth - 1, worldDepth - 1);\nwaterGeometry.rotateX(- Math.PI / 2);\nconst position = waterGeometry.attributes.position;\nfor (let i = 0; i < position.count; i++) {\n\n    const y = 35 * Math.sin(i / 2);\n    position.setY(i, y);\n\n}\n\n// const texture = new THREE.TextureLoader().load('https://live.staticflickr.com/4066/4344198258_e647f9487b_b.jpg');\nconst texture = new THREE.TextureLoader().load('./assets/day1/texture.jpeg');\ntexture.wrapS = texture.wrapT = THREE.RepeatWrapping;\ntexture.repeat.set(5, 5);\n\nlet waterMaterial = new THREE.MeshBasicMaterial({ color: 0x555555, map: texture });\nlet water = new THREE.Mesh(waterGeometry, waterMaterial);\nscene.add(water);\n\n/**\n * Sizes\n */\nconst sizes = {\n    width: window.innerWidth,\n    height: window.innerHeight\n}\n\n// Listen to the resize event\nwindow.addEventListener('resize', () => {\n    //update size for resize\n    sizes.width = window.innerWidth\n    sizes.height = window.innerHeight\n\n    //update camera\n    camera.aspect = sizes.width / sizes.height\n    camera.updateProjectionMatrix();\n\n    //update renderer\n    renderer.setSize(sizes.width, sizes.height) // see https://threejs.org/docs/index.html?q=updat#manual/en/introduction/How-to-update-things\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2)); // change pixel ratio to reduce jaggies & limit it into 2(more than 2 becomes extremely slow)\n})\n\nwindow.addEventListener('dblclick', () => {\n\n    const fullscreenElement = document.fullscreenElement || document.webkitFullscreenElement //for safari\n\n    if (!fullscreenElement) {\n        if (canvas.requestFullscreen) {\n            canvas.requestFullscreen(); // doesn't work on Safari\n        } else if (canvas.webkitRequestFullscreen) {\n            canvas.webkitRequestFullscreen(); //for Safari\n        }\n\n    } else {\n        if (document.exitFullscreen) {\n            document.exitFullscreen(); //not the canvas, it is document    \n        } else if (document.webkitExitFullscreen) {\n            document.webkitExitFullscreen(); //for Safari\n        }\n\n    }\n});\n/**\n * Camera\n */\n// Base camera\nconst camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 10000)\ncamera.position.set(0, 100, 1000);\nscene.add(camera)\n\n\n// Controls\nconst controls = new OrbitControls(camera, canvas)\ncontrols.enableDamping = true\n\n/**\n * Renderer\n */\nconst renderer = new THREE.WebGLRenderer({\n    canvas: canvas\n})\n\nrenderer.setSize(sizes.width, sizes.height)\n\n/**\n * Animate\n */\nconst clock = new THREE.Clock()\n\nconst tick = () => {\n    const delta = clock.getDelta();\n    const time = clock.getElapsedTime() * 10;\n\n    const position = waterGeometry.attributes.position;\n\n    for (let i = 0; i < position.count; i++) {\n\n        const y = 35 * Math.sin(i / 5 + (time + i) / 7);\n        position.setY(i, y);\n\n    }\n    position.needsUpdate = true;\n\n    // controls.update( delta );\n\n    const elapsedTime = clock.getElapsedTime()\n\n    // Update controls\n    controls.update()\n\n    // Render\n    renderer.setClearColor(0xffffff, 1);\n    renderer.render(scene, camera)\n\n    // Call tick again on the next frame\n    window.requestAnimationFrame(tick)\n}\n\ntick()\n    }\n    render() {\n        return (\n            <div>\n                <canvas class=\"webgl\"></canvas>\n            </div>\n        )\n    }\n}\n\nexport default day1;"]},"metadata":{},"sourceType":"module"}