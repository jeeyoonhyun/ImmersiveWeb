[{"/Users/jeeyoonhyun/immersive-web/src/index.js":"1","/Users/jeeyoonhyun/immersive-web/src/reportWebVitals.js":"2","/Users/jeeyoonhyun/immersive-web/src/App.js":"3","/Users/jeeyoonhyun/immersive-web/src/components/Gallery.js":"4","/Users/jeeyoonhyun/immersive-web/src/components/Thumbnail.js":"5","/Users/jeeyoonhyun/immersive-web/src/Pages/Home.js":"6","/Users/jeeyoonhyun/immersive-web/src/Pages/About.js":"7","/Users/jeeyoonhyun/immersive-web/src/Pages/Page.js":"8","/Users/jeeyoonhyun/immersive-web/src/Pages/Error.js":"9","/Users/jeeyoonhyun/immersive-web/src/Pages/day1.js":"10","/Users/jeeyoonhyun/immersive-web/src/components/Header.js":"11","/Users/jeeyoonhyun/immersive-web/src/day1/script.js":"12","/Users/jeeyoonhyun/immersive-web/src/Pages/Day1.js":"13","/Users/jeeyoonhyun/immersive-web/src/Pages/Day2.js":"14","/Users/jeeyoonhyun/immersive-web/src/Pages/Day3.js":"15","/Users/jeeyoonhyun/immersive-web/src/Components/Header.js":"16","/Users/jeeyoonhyun/immersive-web/src/Components/Gallery.js":"17","/Users/jeeyoonhyun/immersive-web/src/Components/Thumbnail.js":"18","/Users/jeeyoonhyun/immersive-web/src/Pages/Day4.js":"19"},{"size":559,"mtime":1624446954199,"results":"20","hashOfConfig":"21"},{"size":362,"mtime":1624415389650,"results":"22","hashOfConfig":"21"},{"size":902,"mtime":1641019095358,"results":"23","hashOfConfig":"21"},{"size":992,"mtime":1624486518981,"results":"24","hashOfConfig":"25"},{"size":1057,"mtime":1624483638352,"results":"26","hashOfConfig":"25"},{"size":245,"mtime":1624487351222,"results":"27","hashOfConfig":"21"},{"size":648,"mtime":1624487345946,"results":"28","hashOfConfig":"21"},{"size":343,"mtime":1624487348151,"results":"29","hashOfConfig":"21"},{"size":355,"mtime":1624487349454,"results":"30","hashOfConfig":"21"},{"size":7252,"mtime":1624482713628,"results":"31","hashOfConfig":"25"},{"size":828,"mtime":1624472575363,"results":"32","hashOfConfig":"25"},{"size":5561,"mtime":1624415819784,"results":"33","hashOfConfig":"25"},{"size":7252,"mtime":1624482745222,"results":"34","hashOfConfig":"21"},{"size":5960,"mtime":1624482727044,"results":"35","hashOfConfig":"21"},{"size":7280,"mtime":1624483322379,"results":"36","hashOfConfig":"21"},{"size":828,"mtime":1641047568011,"results":"37","hashOfConfig":"21"},{"size":1031,"mtime":1641047381125,"results":"38","hashOfConfig":"21"},{"size":1072,"mtime":1641047546139,"results":"39","hashOfConfig":"21"},{"size":6479,"mtime":1641048057674,"results":"40","hashOfConfig":"21"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"44"},"tkaitb",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"44"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"l5xcpu",{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"44"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"44"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"44"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"44"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"44"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"44"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"44"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"44"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"44"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/jeeyoonhyun/immersive-web/src/index.js",["92","93"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["94","95"],"/Users/jeeyoonhyun/immersive-web/src/reportWebVitals.js",[],"/Users/jeeyoonhyun/immersive-web/src/App.js",["96","97"],"import logo from './logo.svg';\nimport './App.css';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\n\nimport Home from './Pages/Home.js'\nimport About from './Pages/About.js'\nimport Page from './Pages/Page.js'\nimport Error from './Pages/Error.js'\nimport Day1 from './Pages/Day1.js'\nimport Day2 from './Pages/Day2.js'\nimport Day3 from './Pages/Day3.js'\nimport Day4 from './Pages/Day4.js'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Switch>\n        <Route path='/' component={Home} exact />\n        <Route path=\"/about\" component={About} />\n        <Route path=\"/page\" component={Page} />\n        <Route path=\"/day1\" component={Day1} />\n        <Route path=\"/day2\" component={Day2} />\n        <Route path=\"/day3\" component={Day3} />\n        <Route path=\"/day4\" component={Day4} />\n        <Route component={Error} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/jeeyoonhyun/immersive-web/src/components/Gallery.js",["98"],"/Users/jeeyoonhyun/immersive-web/src/components/Thumbnail.js",["99"],"/Users/jeeyoonhyun/immersive-web/src/Pages/Home.js",["100"],"import Gallery from '../Components/Gallery.js'\nimport Header from '../Components/Header.js'\n\nfunction Home() {\n  return (\n    <div className=\"container\">\n      <Gallery></Gallery>\n      {/* <Header /> */}\n    </div>\n  );\n}\n\nexport default Home;\n","/Users/jeeyoonhyun/immersive-web/src/Pages/About.js",["101"],"import React, { Component } from 'react';\nimport Header from '../Components/Header.js'\n\n// The number of columns change by resizing the window\nclass About extends React.Component {\n    render() {\n        return (\n            <div>\n                <section>\n                    <h2>About this project</h2>\n                    <p>\n                    <strong>50 days of Immersive Web</strong> is a personal project making 50 web experiments for 50 days\n                    </p>\n                    <h2>Follow me on</h2>\n                </section>\n                \n                <Header />\n            </div>\n        )\n    }\n}\n\nexport default About;","/Users/jeeyoonhyun/immersive-web/src/Pages/Page.js",["102"],"import React, { Component } from 'react';\nimport Header from '../Components/Header.js'\n\n// The number of columns change by resizing the window\nclass Page extends React.Component {\n    render() {\n        return (\n            <div>\n                <p>Page</p>\n                <Header />\n            </div>\n        )\n    }\n}\n\nexport default Page;","/Users/jeeyoonhyun/immersive-web/src/Pages/Error.js",["103"],"import React, { Component } from 'react';\nimport Header from '../Components/Header.js'\n\n// The number of columns change by resizing the window\nclass Error extends React.Component {\n    render() {\n        return (\n            <div>\n                <p>Page not found</p>\n                <Header />\n            </div>\n        )\n    }\n}\n\nexport default Error;","/Users/jeeyoonhyun/immersive-web/src/Pages/day1.js",["104","105","106","107","108","109"],"/Users/jeeyoonhyun/immersive-web/src/components/Header.js",[],["110","111"],"/Users/jeeyoonhyun/immersive-web/src/day1/script.js",["112","113","114","115"],"/Users/jeeyoonhyun/immersive-web/src/Pages/Day1.js",["116","117","118","119","120","121"],"import React, { Component } from 'react';\nimport { Link } from 'react-router';\nimport '../day1/style.css'\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js'\nimport * as THREE from \"three\";\n\n// The number of columns change by resizing the window\nclass Day1 extends React.Component {\n    componentDidMount() {\n        // three.js\n        /**\n * Base\n */\n        // Canvas\n        const canvas = document.querySelector('canvas.webgl')\n\n        // Scene\n        const scene = new THREE.Scene()\n\n        //light\n        const lightColor = \"#ffffff\";\n        const intensity = 1;\n        const light = new THREE.DirectionalLight(lightColor, intensity);\n        light.position.set(-1, 2, 4);\n        scene.add(light);\n\n\n        /**\n         * Object\n         */\n\n        // load font\n        const loader = new THREE.FontLoader();\n        const font = loader.load(\n            // resource URL\n            './assets/day1/anthony.json',\n\n            // onLoad callback\n            function (font) {\n                const color = 0x0;\n\n                const mat = new THREE.MeshPhysicalMaterial({\n                    color: 0xffffff,\n                    emissive: 0x000000,\n                    transparent: true,\n                    opacity: 1,\n                    side: THREE.DoubleSide,\n                    roughness: 0,\n                    metalness: 0,\n                    reflectivity: 0,\n                    clearcoat: 1,\n                    clearcoatRoughness: 1,\n                });\n                // const mat = new THREE.MeshToonMaterial({\n                //     color: 0xf,\n                // })\n\n                const message = \"50 days of \\nimmersive web\";\n\n                // const shapes = font.generateShapes( message, 100 );\n                // const geometry = new THREE.ShapeGeometry( shapes );\n\n                const geometry = new THREE.TextGeometry(message, {\n                    font: font,\n                    size: 72,\n                    height: 8,\n                    curveSegments: 1,\n                    bevelEnabled: true,\n                    bevelThickness: 0.15,\n                    bevelSize: 0.3,\n                    bevelSegments: 5,\n                });\n\n                geometry.computeBoundingBox();\n\n                const xMid = - 0.5 * (geometry.boundingBox.max.x - geometry.boundingBox.min.x);\n\n                geometry.translate(xMid, 0, 0);\n\n                // make shape ( N.B. edge view not visible )\n\n                const text = new THREE.Mesh(geometry, mat);\n                text.position.y = 100;\n                text.position.z = -80;\n                text.rotation.x = -1.3;\n                scene.add(text);\n            },\n\n            // onProgress callback\n            function (xhr) {\n                console.log((xhr.loaded / xhr.total * 100) + '% loaded');\n            },\n\n            // onError callback\n            function (err) {\n                console.log('An error happened');\n            }\n        );\n\n        // water\n        scene.background = new THREE.Color(0xffffff);\n        scene.fog = new THREE.FogExp2(0xffffff, 0.0009);\n\n        const worldWidth = 128, worldDepth = 128;\n        let waterGeometry = new THREE.PlaneGeometry(20000, 20000, worldWidth - 1, worldDepth - 1);\n        waterGeometry.rotateX(- Math.PI / 2);\n        const position = waterGeometry.attributes.position;\n        for (let i = 0; i < position.count; i++) {\n\n            const y = 35 * Math.sin(i / 2);\n            position.setY(i, y);\n\n        }\n\n        // const texture = new THREE.TextureLoader().load('https://live.staticflickr.com/4066/4344198258_e647f9487b_b.jpg');\n        const texture = new THREE.TextureLoader().load('./assets/day1/texture.jpeg');\n        texture.wrapS = texture.wrapT = THREE.RepeatWrapping;\n        texture.repeat.set(5, 5);\n\n        let waterMaterial = new THREE.MeshBasicMaterial({ color: 0x555555, map: texture });\n        let water = new THREE.Mesh(waterGeometry, waterMaterial);\n        scene.add(water);\n\n        /**\n         * Sizes\n         */\n        const sizes = {\n            width: window.innerWidth,\n            height: window.innerHeight\n        }\n\n        // Listen to the resize event\n        window.addEventListener('resize', () => {\n            //update size for resize\n            sizes.width = window.innerWidth\n            sizes.height = window.innerHeight\n\n            //update camera\n            camera.aspect = sizes.width / sizes.height\n            camera.updateProjectionMatrix();\n\n            //update renderer\n            renderer.setSize(sizes.width, sizes.height) // see https://threejs.org/docs/index.html?q=updat#manual/en/introduction/How-to-update-things\n            renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2)); // change pixel ratio to reduce jaggies & limit it into 2(more than 2 becomes extremely slow)\n        })\n\n        window.addEventListener('dblclick', () => {\n\n            const fullscreenElement = document.fullscreenElement || document.webkitFullscreenElement //for safari\n\n            if (!fullscreenElement) {\n                if (canvas.requestFullscreen) {\n                    canvas.requestFullscreen(); // doesn't work on Safari\n                } else if (canvas.webkitRequestFullscreen) {\n                    canvas.webkitRequestFullscreen(); //for Safari\n                }\n\n            } else {\n                if (document.exitFullscreen) {\n                    document.exitFullscreen(); //not the canvas, it is document    \n                } else if (document.webkitExitFullscreen) {\n                    document.webkitExitFullscreen(); //for Safari\n                }\n\n            }\n        });\n        /**\n         * Camera\n         */\n        // Base camera\n        const camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 10000)\n        camera.position.set(0, 100, 1000);\n        scene.add(camera)\n\n\n        // Controls\n        const controls = new OrbitControls(camera, canvas)\n        controls.enableDamping = true\n\n        /**\n         * Renderer\n         */\n        const renderer = new THREE.WebGLRenderer({\n            canvas: canvas\n        })\n\n        renderer.setSize(sizes.width, sizes.height)\n\n        /**\n         * Animate\n         */\n        const clock = new THREE.Clock()\n\n        const tick = () => {\n            const delta = clock.getDelta();\n            const time = clock.getElapsedTime() * 10;\n\n            const position = waterGeometry.attributes.position;\n\n            for (let i = 0; i < position.count; i++) {\n\n                const y = 35 * Math.sin(i / 5 + (time + i) / 7);\n                position.setY(i, y);\n\n            }\n            position.needsUpdate = true;\n\n            // controls.update( delta );\n\n            const elapsedTime = clock.getElapsedTime()\n\n            // Update controls\n            controls.update()\n\n            // Render\n            renderer.setClearColor(0xffffff, 1);\n            renderer.render(scene, camera)\n\n            // Call tick again on the next frame\n            window.requestAnimationFrame(tick)\n        }\n\n        tick()\n    }\n    render() {\n        return (\n            <div>\n                <canvas class=\"webgl\"></canvas>\n            </div>\n        )\n    }\n}\n\nexport default Day1;","/Users/jeeyoonhyun/immersive-web/src/Pages/Day2.js",["122","123","124"],"import React, { Component } from 'react';\nimport { Link } from 'react-router';\nimport '../day2/style.css'\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js'\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer.js';\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass.js';\nimport { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass.js';\nimport * as THREE from \"three\";\n\n// The number of columns change by resizing the window\nclass Day2 extends React.Component {\n    componentDidMount() {\n        //    insert three.js code\n        /**\n     * Base\n     */\n        // Canvas\n        const canvas = document.querySelector('canvas.webgl')\n\n        // Scene\n        const scene = new THREE.Scene()\n\n        /**\n         * Object\n         */\n\n        let mesh;\n        let geometry;\n        const group = new THREE.Group();\n        // const geometry = new THREE.TorusKnotGeometry( 1, 0.02, 8, 16 );\n        const material = new THREE.MeshBasicMaterial({ color: 0xffffff });\n        mesh = new THREE.Mesh(geometry, material);\n        scene.add(mesh);\n\n        for (let i = 0; i < 10; i++) {\n            geometry = new THREE.TorusKnotGeometry(0.5, 0.02, 8, 16, 10 + Math.floor(Math.random() * 10), 10 + Math.floor(Math.random() * 10));\n            mesh = new THREE.Mesh(geometry, material);\n            mesh.position.set(Math.floor(Math.random() * 3), Math.floor(Math.random() * 3), Math.floor(Math.random() * 3));\n            group.add(mesh);\n        }\n\n        scene.add(group);\n        group.position.set(0, 0, -1);\n        let params = {\n            exposure: 1,\n            bloomStrength: 1.5,\n            bloomThreshold: 0.1,\n            bloomRadius: 0\n        };\n\n        /**\n         * Sizes\n         */\n        const sizes = {\n            width: window.innerWidth,\n            height: window.innerHeight\n        }\n\n        /**\n         * Camera\n         */\n        // Base camera\n        const camera = new THREE.PerspectiveCamera(30, sizes.width / sizes.height, 1, 50)\n        camera.position.set(1, -3, 0);\n        scene.add(camera);\n        camera.lookAt(group);\n\n        // Controls\n        const controls = new OrbitControls(camera, canvas)\n        controls.enableDamping = true\n\n        // lights\n        scene.add(new THREE.AmbientLight(0x404040));\n        const pointLight = new THREE.PointLight(0xffffff, 1);\n        camera.add(pointLight);\n\n        /**\n         * Renderer\n         */\n        const renderer = new THREE.WebGLRenderer({\n            canvas: canvas,\n            antialias: true\n        })\n        renderer.toneMapping = THREE.ReinhardToneMapping;\n        renderer.setSize(sizes.width, sizes.height)\n\n        // RenderPass\n\n        const renderScene = new RenderPass(scene, camera);\n\n        const bloomPass = new UnrealBloomPass(new THREE.Vector2(sizes.innerWidth, sizes.innerHeight), 1.5, 0.4, 0.85);\n        bloomPass.threshold = params.bloomThreshold;\n        bloomPass.strength = params.bloomStrength;\n        bloomPass.radius = params.bloomRadius;\n\n        let composer = new EffectComposer(renderer);\n        composer.addPass(renderScene);\n        composer.addPass(bloomPass);\n\n        /**\n         * Animate\n         */\n        const clock = new THREE.Clock()\n        const scaleKF = new THREE.VectorKeyframeTrack('.scale', [0, 1, 2], [1, 1, 1, 2, 2, 2, 1, 1, 1]);\n        const clip = new THREE.AnimationClip('Action', 3, [scaleKF]);\n\n        // setup the THREE.AnimationMixer\n        let mixer = new THREE.AnimationMixer(mesh);\n\n        // create a ClipAction and set it to play\n        const clipAction = mixer.clipAction(clip);\n\n        //resize\n        // Listen to the resize event\n        window.addEventListener('resize', () => {\n            //update size for resize\n            sizes.width = window.innerWidth\n            sizes.height = window.innerHeight\n\n            //update camera\n            camera.aspect = sizes.width / sizes.height\n            camera.updateProjectionMatrix();\n\n            //update renderer\n            renderer.setSize(sizes.width, sizes.height) // see https://threejs.org/docs/index.html?q=updat#manual/en/introduction/How-to-update-things\n            renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2)); // change pixel ratio to reduce jaggies & limit it into 2(more than 2 becomes extremely slow)\n        })\n\n        window.addEventListener('dblclick', () => {\n\n            const fullscreenElement = document.fullscreenElement || document.webkitFullscreenElement //for safari\n\n            if (!fullscreenElement) {\n                if (canvas.requestFullscreen) {\n                    canvas.requestFullscreen(); // doesn't work on Safari\n                } else if (canvas.webkitRequestFullscreen) {\n                    canvas.webkitRequestFullscreen(); //for Safari\n                }\n\n            } else {\n                if (document.exitFullscreen) {\n                    document.exitFullscreen(); //not the canvas, it is document    \n                } else if (document.webkitExitFullscreen) {\n                    document.webkitExitFullscreen(); //for Safari\n                }\n\n            }\n        });\n\n        const tick = () => {\n            const delta = clock.getDelta();\n            const time = clock.getElapsedTime() * 10;\n\n            params.bloomStrength = 5 * Math.sin(time);\n            params.needsUpdate = true;\n\n            group.rotation.x += 0.01;\n            group.rotation.y += 0.01;\n\n            // Update controls\n            controls.update()\n\n            // Render\n            renderer.render(scene, camera)\n\n            // Call tick again on the next frame\n            window.requestAnimationFrame(tick)\n\n            composer.render();\n            clipAction.play();\n        }\n\n        tick()\n    }\n    render() {\n        return (\n            <div>\n                <canvas class=\"webgl\"></canvas>\n            </div>\n        )\n    }\n}\n\nexport default Day2;","/Users/jeeyoonhyun/immersive-web/src/Pages/Day3.js",["125","126","127","128","129"],"import React, { Component } from 'react';\nimport { Link } from 'react-router';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js'\nimport { DirectionalLight } from 'three'\nimport * as THREE from \"three\";\nimport '../day3/style.css'\n\n// The number of columns change by resizing the window\nclass Day3 extends React.Component {\n    componentDidMount() {\n    //    insert three.js code\n    // Params\nconst parameters = {\n    meshColor: 0x97cdae,\n    lightColor: 0xffffff,\n    planeColor: 0x313866,\n    deviceAlpha:0,\n    deviceBeta:0,\n    deviceGamma: 0,\n}\n\n/**\n * Base\n */\n// Canvas\nconst canvas = document.querySelector('canvas.webgl')\n\n// Scene\nconst scene = new THREE.Scene()\nscene.background = new THREE.Color( 0xf1d3d3 );\n\n/**\n * Object\n */\n// const geometry = new THREE.BoxGeometry(10, 10, 10)\nconst geometry = new THREE.TorusKnotGeometry( 5, 1.2, 64, 16, 1, 2 );\nconst material = new THREE.MeshToonMaterial({ color: parameters.meshColor })\nconst mesh = new THREE.Mesh(geometry, material)\nmesh.castShadow = true;\nmesh.receiveShadow = true;\nscene.add(mesh)\nmesh.position.set(0,5,3);\n\n// Light\n// const dirLight = new THREE.DirectionalLight( parameters.lightColor, 0.7 );\nconst dirLight = new THREE.DirectionalLight( 0xffffff, 0.7 );\ndirLight.castShadow = true; // default false\ndirLight.position.set(0,60,5);\n\n// adjust dirLight size\ndirLight.shadowCameraLeft = -10;\ndirLight.shadowCameraRight = 10;\ndirLight.shadowCameraTop = 10;\ndirLight.shadowCameraBottom = -10;\n\nscene.add( dirLight );\n\n// const helper = new THREE.CameraHelper( dirLight.shadow.camera );\n// scene.add( helper );\n\n\n\nconst ambLight = new THREE.AmbientLight(0xffffff);\nscene.add( ambLight );\n\n\n/**\n * Sizes\n */\nconst sizes = {\n    width: window.innerWidth,\n    height: window.innerHeight\n}\n\nwindow.addEventListener('resize', () =>\n{\n    // Update sizes\n    sizes.width = window.innerWidth\n    sizes.height = window.innerHeight\n\n    // Update camera\n    camera.aspect = sizes.width / sizes.height\n    camera.updateProjectionMatrix()\n\n    // Update renderer\n    renderer.setSize(sizes.width, sizes.height)\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\n})\n\n/**\n * Fullscreen\n */\nwindow.addEventListener('dblclick', () =>\n{\n    const fullscreenElement = document.fullscreenElement || document.webkitFullscreenElement\n\n    if(!fullscreenElement)\n    {\n        if(canvas.requestFullscreen)\n        {\n            canvas.requestFullscreen()\n        }\n        else if(canvas.webkitRequestFullscreen)\n        {\n            canvas.webkitRequestFullscreen()\n        }\n    }\n    else\n    {\n        if(document.exitFullscreen)\n        {\n            document.exitFullscreen()\n        }\n        else if(document.webkitExitFullscreen)\n        {\n            document.webkitExitFullscreen()\n        }\n    }\n})\n\n// Plane for receiving shadows\nconst planeGeometry = new THREE.PlaneBufferGeometry(100, 100);\nconst planeMaterial = new THREE.MeshToonMaterial({ color: parameters.planeColor});\n// weird box appears in the shadows?? don't know why\n// const planeMaterial = new THREE.MeshToonMaterial({ color: 0x313866, side: THREE.DoubleSide}); \nconst plane = new THREE.Mesh(planeGeometry, planeMaterial);\nscene.add(plane);\nplane.rotateX(-2);\nplane.position.set(0,-20,0);\n\n// Shadow on plane\nplane.castShadow = true;\nplane.receiveShadow = true;\n\n/**\n * Camera\n */\n// Base camera\nconst camera = new THREE.PerspectiveCamera(75, sizes.width / sizes.height, 0.1, 100)\ncamera.position.set(0,20,30);\ncamera.lookAt(plane.position);\nscene.add(camera)\n\n// Controls\nconst controls = new OrbitControls(camera, canvas)\ncontrols.enableDamping = true\n\n/**\n * Renderer\n */\nconst renderer = new THREE.WebGLRenderer({\n    canvas: canvas\n})\nrenderer.setSize(sizes.width, sizes.height)\nrenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\n\n// Shadows\nrenderer.shadowMap.enabled = true;\nrenderer.shadowMap.type = THREE.PCFSoftShadowMap; // default THREE.PCFShadowMap\n\n// axisHelper\n// const axesHelper = new THREE.AxesHelper( 20 );\n// scene.add( axesHelper );\n\n// dat.gui\n\n// const gui = new dat.GUI({autoPlace: true});\n// gui.domElement.id = 'gui';\n// let folder = gui.addFolder(`Colors`)\n// gui\n//     .addColor(parameters, 'meshColor')\n//     .onChange(() =>\n//     {\n//         material.color.set(parameters.meshColor)\n//     })\n// gui\n//     .addColor(parameters, 'lightColor')\n//     .onChange(() =>\n//     {\n//         material.color.set(parameters.lightColor)\n//     })\n\n/**\n * Animate\n */\nconst clock = new THREE.Clock()\n\nconst getPermisson = e => {\n    e.preventDefault();\n    // Request permission for iOS 13+ devices\n    if (\n        DeviceOrientationEvent &&\n        typeof DeviceOrientationEvent.requestPermission === \"function\"\n      ) {\n        console.log(\"click event received!!\")\n        DeviceOrientationEvent.requestPermission();\n    }\n}\n\nconst rotate = e => {\n    console.log(\"orientation event received!\")\n    var x = e.beta;\n    var y = e.alpha;\n    var z = e.gamma;\n\n    // Because we don't want to have the device upside down\n    // We constrain the x value to the range [-90,90]\n    if (y > 90) {\n        y = 90;\n    }\n    if (y < -90) {\n        y = -90;\n    }\n\n    if (z > 90) {\n        z = 90;\n    }\n    if (z < -90) {\n        z = -90;\n    }\n\n    parameters.deviceBeta = x;\n    parameters.deviceAlpha = y;\n    parameters.deviceGamma = z;\n}\n\n// get device orientation when button is clicked\nlet is_running = false;\nlet button = document.getElementById(\"start\");\n\nbutton.onclick = function(e) {\n    e.preventDefault();\n\n    if (is_running){\n        scene.background = new THREE.Color( 0xf1d3d3 );\n        button.innerText = 'start detection';\n        // iOS permission\n        window.removeEventListener(\"click\", getPermisson);\n        window.removeEventListener(\"touchstart\", getPermisson);\n        // device orientation\n        window.removeEventListener(\"deviceorientation\", rotate, true);\n        is_running = false;\n      }else{\n        scene.background = new THREE.Color( 0xF2E7B3 );\n        button.innerText = 'stop detection';\n        // iOS permission\n        window.addEventListener(\"click\", getPermisson);\n        window.addEventListener(\"touchstart\", getPermisson);\n        // device orientation\n        window.addEventListener(\"deviceorientation\", rotate, true);\n        is_running = true;\n      }\n\n}\nconst tick = () =>\n{\n    // window.addEventListener(\"deviceorientation\", rotate, true);\n    const elapsedTime = clock.getElapsedTime()\n\n    // Update controls\n    controls.update()\n\n    // Render\n    renderer.render(scene, camera)\n\n    // Rotation\n    mesh.rotation.x = parameters.deviceBeta * Math.PI / 180;\n    mesh.rotation.y = parameters.deviceAlpha * Math.PI / 180;\n    mesh.rotation.z = - parameters.deviceGamma * Math.PI / 180;\n    \n\n    // Call tick again on the next frame\n    window.requestAnimationFrame(tick)\n}\n\ntick()\n\n    }\n    render() {\n        return (\n            <div>\n                <div id = \"container\">\n                    <p id =\"description\">press button and turn your phone around</p>\n                    <button id=\"start\" className=\"btn\" href=\"#\" role=\"button\">start detection</button>\n                    <canvas className=\"webgl\"></canvas>\n                </div>            \n            </div>\n        )\n    }\n}\n\nexport default Day3;","/Users/jeeyoonhyun/immersive-web/src/Components/Header.js",[],"/Users/jeeyoonhyun/immersive-web/src/Components/Gallery.js",["130"],"import React, { Component } from 'react';\nimport Masonry, {ResponsiveMasonry} from \"react-responsive-masonry\"\nimport Thumbnail from './Thumbnail.js';\n\n// The number of columns change by resizing the window\nclass Gallery extends React.Component {\n    render() {\n        return (\n            <ResponsiveMasonry\n                columnsCountBreakPoints={{350: 1, 750: 2, 900: 3}}\n                // https://github.com/cedricdelpoux/react-responsive-masonry#readme\n            >\n                <Masonry>\n                    <Thumbnail day=\"1\" title=\"Diving\" img=\"./assets/day1/day1.gif\"/>\n                    <Thumbnail day=\"2\" title=\"Postprocessing\" img=\"./assets/day2/day2.gif\"/>\n                    <Thumbnail day=\"3\" title=\"Rotation\" img=\"./assets/day3/day3.gif\"/>\n                    <Thumbnail day=\"4\" title=\"10000\" img=\"./assets/day4/day4.gif\"/>\n                    <Thumbnail img=\"\"/>\n                    <Thumbnail img=\"\"/>\n                </Masonry>\n            </ResponsiveMasonry>\n        )\n    }\n}\n\nexport default Gallery;","/Users/jeeyoonhyun/immersive-web/src/Components/Thumbnail.js",["131"],"import React, { Component } from 'react';\nimport {Link} from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nconst Background = styled.div`\n    background:url(${props => props.img}) no-repeat center center;\n    background-size:cover;\n    height:30vh;\n    padding: 1.5em;\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-end;\n    &:hover {\n        opacity: .2;\n    }\n`\n\nconst Day = styled.h4`\n    margin:0;\n    color:#fff;\n`\n\nconst Title = styled.h2`\n    margin:0.5em 0 0 0;\n    color:#fff;\n`\n\n// The number of columns change by resizing the window\nclass Thumbnail extends React.Component {\n    render() {\n        return (\n            <div>\n                <Link to= {this.props.day ? `day${this.props.day}`: `/`} >\n                    <Background img = {this.props.img}>\n                        <Day>{this.props.day ? `Day `+ this.props.day : null} </Day>\n                        <Title>{this.props.title}</Title>\n                    </Background>\n                </Link>\n            </div>\n        )\n    }\n}\n\nexport default Thumbnail;","/Users/jeeyoonhyun/immersive-web/src/Pages/Day4.js",["132","133","134"],{"ruleId":"135","severity":1,"message":"136","line":6,"column":25,"nodeType":"137","messageId":"138","endLine":6,"endColumn":30},{"ruleId":"135","severity":1,"message":"139","line":6,"column":32,"nodeType":"137","messageId":"138","endLine":6,"endColumn":38},{"ruleId":"140","replacedBy":"141"},{"ruleId":"142","replacedBy":"143"},{"ruleId":"135","severity":1,"message":"144","line":1,"column":8,"nodeType":"137","messageId":"138","endLine":1,"endColumn":12},{"ruleId":"135","severity":1,"message":"145","line":3,"column":10,"nodeType":"137","messageId":"138","endLine":3,"endColumn":23},{"ruleId":"135","severity":1,"message":"146","line":1,"column":17,"nodeType":"137","messageId":"138","endLine":1,"endColumn":26},{"ruleId":"135","severity":1,"message":"146","line":1,"column":17,"nodeType":"137","messageId":"138","endLine":1,"endColumn":26},{"ruleId":"135","severity":1,"message":"147","line":2,"column":8,"nodeType":"137","messageId":"138","endLine":2,"endColumn":14},{"ruleId":"135","severity":1,"message":"146","line":1,"column":17,"nodeType":"137","messageId":"138","endLine":1,"endColumn":26},{"ruleId":"135","severity":1,"message":"146","line":1,"column":17,"nodeType":"137","messageId":"138","endLine":1,"endColumn":26},{"ruleId":"135","severity":1,"message":"146","line":1,"column":17,"nodeType":"137","messageId":"138","endLine":1,"endColumn":26},{"ruleId":"135","severity":1,"message":"146","line":1,"column":17,"nodeType":"137","messageId":"138","endLine":1,"endColumn":26},{"ruleId":"135","severity":1,"message":"148","line":2,"column":10,"nodeType":"137","messageId":"138","endLine":2,"endColumn":14},{"ruleId":"135","severity":1,"message":"149","line":34,"column":15,"nodeType":"137","messageId":"138","endLine":34,"endColumn":19},{"ruleId":"135","severity":1,"message":"150","line":40,"column":23,"nodeType":"137","messageId":"138","endLine":40,"endColumn":28},{"ruleId":"135","severity":1,"message":"151","line":195,"column":19,"nodeType":"137","messageId":"138","endLine":195,"endColumn":24},{"ruleId":"135","severity":1,"message":"152","line":210,"column":19,"nodeType":"137","messageId":"138","endLine":210,"endColumn":30},{"ruleId":"140","replacedBy":"153"},{"ruleId":"142","replacedBy":"154"},{"ruleId":"135","severity":1,"message":"149","line":28,"column":7,"nodeType":"137","messageId":"138","endLine":28,"endColumn":11},{"ruleId":"135","severity":1,"message":"150","line":34,"column":15,"nodeType":"137","messageId":"138","endLine":34,"endColumn":20},{"ruleId":"135","severity":1,"message":"151","line":189,"column":11,"nodeType":"137","messageId":"138","endLine":189,"endColumn":16},{"ruleId":"135","severity":1,"message":"152","line":204,"column":11,"nodeType":"137","messageId":"138","endLine":204,"endColumn":22},{"ruleId":"135","severity":1,"message":"146","line":1,"column":17,"nodeType":"137","messageId":"138","endLine":1,"endColumn":26},{"ruleId":"135","severity":1,"message":"148","line":2,"column":10,"nodeType":"137","messageId":"138","endLine":2,"endColumn":14},{"ruleId":"135","severity":1,"message":"149","line":34,"column":15,"nodeType":"137","messageId":"138","endLine":34,"endColumn":19},{"ruleId":"135","severity":1,"message":"150","line":40,"column":23,"nodeType":"137","messageId":"138","endLine":40,"endColumn":28},{"ruleId":"135","severity":1,"message":"151","line":195,"column":19,"nodeType":"137","messageId":"138","endLine":195,"endColumn":24},{"ruleId":"135","severity":1,"message":"152","line":210,"column":19,"nodeType":"137","messageId":"138","endLine":210,"endColumn":30},{"ruleId":"135","severity":1,"message":"146","line":1,"column":17,"nodeType":"137","messageId":"138","endLine":1,"endColumn":26},{"ruleId":"135","severity":1,"message":"148","line":2,"column":10,"nodeType":"137","messageId":"138","endLine":2,"endColumn":14},{"ruleId":"135","severity":1,"message":"151","line":151,"column":19,"nodeType":"137","messageId":"138","endLine":151,"endColumn":24},{"ruleId":"135","severity":1,"message":"146","line":1,"column":17,"nodeType":"137","messageId":"138","endLine":1,"endColumn":26},{"ruleId":"135","severity":1,"message":"148","line":2,"column":10,"nodeType":"137","messageId":"138","endLine":2,"endColumn":14},{"ruleId":"135","severity":1,"message":"155","line":4,"column":10,"nodeType":"137","messageId":"138","endLine":4,"endColumn":26},{"ruleId":"135","severity":1,"message":"152","line":258,"column":11,"nodeType":"137","messageId":"138","endLine":258,"endColumn":22},{"ruleId":"156","severity":1,"message":"157","line":284,"column":21,"nodeType":"158","endLine":284,"endColumn":79},{"ruleId":"135","severity":1,"message":"146","line":1,"column":17,"nodeType":"137","messageId":"138","endLine":1,"endColumn":26},{"ruleId":"135","severity":1,"message":"146","line":1,"column":17,"nodeType":"137","messageId":"138","endLine":1,"endColumn":26},{"ruleId":"135","severity":1,"message":"146","line":1,"column":17,"nodeType":"137","messageId":"138","endLine":1,"endColumn":26},{"ruleId":"135","severity":1,"message":"148","line":2,"column":10,"nodeType":"137","messageId":"138","endLine":2,"endColumn":14},{"ruleId":"135","severity":1,"message":"159","line":173,"column":23,"nodeType":"137","messageId":"138","endLine":173,"endColumn":24},"no-unused-vars","'Route' is defined but never used.","Identifier","unusedVar","'Switch' is defined but never used.","no-native-reassign",["160"],"no-negated-in-lhs",["161"],"'logo' is defined but never used.","'BrowserRouter' is defined but never used.","'Component' is defined but never used.","'Header' is defined but never used.","'Link' is defined but never used.","'font' is assigned a value but never used.","'color' is assigned a value but never used.","'delta' is assigned a value but never used.","'elapsedTime' is assigned a value but never used.",["160"],["161"],"'DirectionalLight' is defined but never used.","jsx-a11y/no-redundant-roles","The element button has an implicit role of button. Defining this explicitly is redundant and should be avoided.","JSXOpeningElement","'x' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]