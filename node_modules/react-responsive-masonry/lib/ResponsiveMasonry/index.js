"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

exports.__esModule = true;
exports["default"] = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _this = void 0,
    _jsxFileName = "/Users/cedric/Code/react-responsive-masonry/src/ResponsiveMasonry/index.js";

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var DEFAULT_COLUMNS_COUNT = 1;

var getWindowWidth = function getWindowWidth() {
  if (typeof window === "undefined") return null;
  return window.innerWidth;
};

var useWindowWidth = function useWindowWidth() {
  var _useState = (0, _react.useState)(getWindowWidth()),
      width = _useState[0],
      setWidth = _useState[1];

  var hasWindow = typeof window !== "undefined";
  var handleResize = (0, _react.useCallback)(function () {
    setWidth(getWindowWidth());
  }, []);
  (0, _react.useEffect)(function () {
    if (hasWindow) {
      window.addEventListener("resize", handleResize);
      return function () {
        return window.removeEventListener("resize", handleResize);
      };
    }
  }, [hasWindow, handleResize]);
  return width;
};

var MasonryResponsive = function MasonryResponsive(_ref) {
  var columnsCountBreakPoints = _ref.columnsCountBreakPoints,
      children = _ref.children,
      className = _ref.className,
      style = _ref.style;
  var windowWidth = useWindowWidth();
  var columnsCount = (0, _react.useMemo)(function () {
    var breakPoints = Object.keys(columnsCountBreakPoints).sort(function (a, b) {
      return a - b;
    });
    var count = breakPoints.length > 0 ? columnsCountBreakPoints[breakPoints[0]] : DEFAULT_COLUMNS_COUNT;
    breakPoints.forEach(function (breakPoint) {
      if (breakPoint < windowWidth) {
        count = columnsCountBreakPoints[breakPoint];
      }
    });
    return count;
  }, [windowWidth, columnsCountBreakPoints]);
  return /*#__PURE__*/_react["default"].createElement("div", {
    className: className,
    style: style,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 56,
      columnNumber: 5
    }
  }, _react["default"].Children.map(children, function (child, index) {
    return _react["default"].cloneElement(child, {
      key: index,
      columnsCount: columnsCount
    });
  }));
};

MasonryResponsive.propTypes = process.env.NODE_ENV !== "production" ? {
  children: _propTypes["default"].oneOfType([_propTypes["default"].arrayOf(_propTypes["default"].node), _propTypes["default"].node]).isRequired,
  columnsCountBreakPoints: _propTypes["default"].object,
  className: _propTypes["default"].string,
  style: _propTypes["default"].object
} : {};
MasonryResponsive.defaultProps = {
  columnsCountBreakPoints: {
    350: 1,
    750: 2,
    900: 3
  },
  className: null,
  style: null
};
var _default = MasonryResponsive;
exports["default"] = _default;
module.exports = exports.default;