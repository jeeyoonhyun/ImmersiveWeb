{"version":3,"sources":["logo.svg","Components/Thumbnail.js","Components/Gallery.js","Components/Header.js","Pages/Home.js","Pages/About.js","Pages/Page.js","Pages/Error.js","Pages/Day1.js","Pages/Day2.js","Pages/Day3.js","Pages/Day4.js","Pages/Day5.js","Pages/Day6.js","App.js","reportWebVitals.js","index.js"],"names":["Background","styled","div","props","img","Day","h4","Title","h2","Thumbnail","to","this","day","title","React","Component","Gallery","columnsCountBreakPoints","350","750","900","Navbar","Header","id","className","href","Home","About","Page","Error","Day1","canvas","document","querySelector","scene","THREE","light","position","set","add","load","font","mat","color","emissive","transparent","opacity","side","roughness","metalness","reflectivity","clearcoat","clearcoatRoughness","geometry","size","height","curveSegments","bevelEnabled","bevelThickness","bevelSize","bevelSegments","computeBoundingBox","xMid","boundingBox","max","x","min","translate","text","y","z","rotation","xhr","console","log","loaded","total","err","background","fog","waterGeometry","worldWidth","worldDepth","rotateX","Math","PI","attributes","i","count","sin","setY","texture","wrapS","wrapT","repeat","waterMaterial","map","water","sizes","width","window","innerWidth","innerHeight","addEventListener","camera","aspect","updateProjectionMatrix","renderer","setSize","setPixelRatio","devicePixelRatio","fullscreenElement","webkitFullscreenElement","exitFullscreen","webkitExitFullscreen","requestFullscreen","webkitRequestFullscreen","controls","OrbitControls","enableDamping","clock","tick","getDelta","time","getElapsedTime","needsUpdate","update","setClearColor","render","requestAnimationFrame","class","Day2","mesh","group","material","floor","random","params","exposure","bloomStrength","bloomThreshold","bloomRadius","lookAt","pointLight","antialias","toneMapping","renderScene","RenderPass","bloomPass","UnrealBloomPass","threshold","strength","radius","composer","EffectComposer","addPass","scaleKF","clip","clipAction","play","Day3","parameters","meshColor","lightColor","planeColor","deviceAlpha","deviceBeta","deviceGamma","castShadow","receiveShadow","dirLight","shadowCameraLeft","shadowCameraRight","shadowCameraTop","shadowCameraBottom","ambLight","planeGeometry","planeMaterial","plane","shadowMap","enabled","type","getPermisson","e","preventDefault","DeviceOrientationEvent","requestPermission","rotate","beta","alpha","gamma","is_running","button","getElementById","onclick","innerText","removeEventListener","role","Day4","loadingManager","onStart","onLoad","onProgress","onError","textureLoader","particlesTextureArray","push","particlesGeometryArray","positions","Float32Array","j","setAttribute","colors","particlesMaterialArray","sizeAttenuation","alphaMap","depthWrite","blending","vertexColors","particles","elapsedTime","i3","array","Day5","gui","dat","directionalLight","shadow","mapSize","far","normalBias","pulseSize","effectComposer","physicallyCorrectLights","outputEncoding","toneMappingExposure","renderTarget","getPixelRatio","capabilities","isWebGL2","minFilter","magFilter","format","renderPass","thresholdPass","ShaderPass","uniforms","tDiffuse","value","uTint","uBrightness","vertexShader","fragmentShader","name","unrealBloomPass","gammaCorrectionPass","GammaCorrectionShader","smaaPass","SMAAPass","scale","Day6","bayerPass","uResolution","bayerShader","App","path","component","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM"],"mappings":"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","file":"static/js/main.d315fdb8.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { Component } from 'react';\nimport {Link} from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nconst Background = styled.div`\n    background:linear-gradient(to bottom, rgba(255, 255, 255, 0), rgba(0, 0, 0, 0.5)), url(${props => props.img}) no-repeat center center;\n    background-size:cover;\n    height:30vh;\n    padding: 1.5em;\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-end;\n    &:hover {\n        background:url(${props => props.img}) no-repeat center center;\n        background-size:cover;\n    }\n`\n\nconst Day = styled.h4`\n    margin:0;\n    color:#fff;\n`\n\nconst Title = styled.h2`\n    margin:0.5em 0 0 0;\n    color:#fff;\n`\n\n// The number of columns change by resizing the window\nclass Thumbnail extends React.Component {\n    render() {\n        return (\n            <div>\n                <Link to= {this.props.day ? `day${this.props.day}`: `/`} >\n                    <Background img = {this.props.img}>\n                        <Day>{this.props.day ? `Day `+ this.props.day : null} </Day>\n                        <Title>{this.props.title}</Title>\n                    </Background>\n                </Link>\n            </div>\n        )\n    }\n}\n\nexport default Thumbnail;","import React, { Component } from 'react';\nimport Masonry, {ResponsiveMasonry} from \"react-responsive-masonry\"\nimport Thumbnail from './Thumbnail.js';\n\n// The number of columns change by resizing the window\nclass Gallery extends React.Component {\n    render() {\n        return (\n            <ResponsiveMasonry\n                columnsCountBreakPoints={{350: 1, 750: 2, 900: 3}}\n                // https://github.com/cedricdelpoux/react-responsive-masonry#readme\n            >\n                <Masonry>\n                    <Thumbnail day=\"6\" title=\"Dithering\" img=\"./assets/day6/day6.gif\"/>\n                    <Thumbnail day=\"5\" title=\"Custom Postprocessing\" img=\"./assets/day5/day5.gif\"/>\n                    <Thumbnail day=\"4\" title=\"10000\" img=\"./assets/day4/day4.gif\"/>\n                    <Thumbnail day=\"3\" title=\"Rotation\" img=\"./assets/day3/day3.gif\"/>\n                    <Thumbnail day=\"2\" title=\"Postprocessing\" img=\"./assets/day2/day2.gif\"/>\n                    <Thumbnail day=\"1\" title=\"Diving\" img=\"./assets/day1/day1.gif\"/>\n                </Masonry>\n            </ResponsiveMasonry>\n        )\n    }\n}\n\nexport default Gallery;","import React from 'react';\nimport {Link} from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nconst Navbar = styled.div`\n  display: flex;\n  justify-content: space-evenly;\n  align-items: center;\n  position: fixed;\n  bottom: 0;\n  width: 100%;\n  background: white;\n  color:black;\n`\n\nexport default function Header() {\n  return (\n    <Navbar id=\"header\">\n      <h1>\n        <Link to=\"/\">\n          <strong>50 Days of Immersive Web</strong> by Jeeyoon Hyun\n        </Link>\n      </h1>\n      <nav>\n        <ul>\n          <li>\n            <Link to=\"/About\" className=\"\">\n              About\n            </Link>\n          </li>\n          <li>\n            <a href=\"https://www.instagram.com/jeeyoonhyun/\" className=\"\">\n              Instagram\n            </a>\n          </li>\n        </ul>\n      </nav>\n    </Navbar>\n  );\n}\n","import Gallery from '../Components/Gallery.js'\nimport Header from '../Components/Header.js'\n\nfunction Home() {\n  return (\n    <div className=\"container\">\n      <Gallery></Gallery>\n      {/* <Header /> */}\n    </div>\n  );\n}\n\nexport default Home;\n","import React, { Component } from 'react';\nimport Header from '../Components/Header.js'\n\n// The number of columns change by resizing the window\nclass About extends React.Component {\n    render() {\n        return (\n            <div>\n                <section>\n                    <h2>About this project</h2>\n                    <p>\n                    <strong>50 days of Immersive Web</strong> is a personal project making 50 web experiments for 50 days\n                    </p>\n                    <h2>Follow me on</h2>\n                </section>\n                \n                <Header />\n            </div>\n        )\n    }\n}\n\nexport default About;","import React, { Component } from 'react';\nimport Header from '../Components/Header.js'\n\n// The number of columns change by resizing the window\nclass Page extends React.Component {\n    render() {\n        return (\n            <div>\n                <p>Page</p>\n                <Header />\n            </div>\n        )\n    }\n}\n\nexport default Page;","import React, { Component } from 'react';\nimport Header from '../Components/Header.js'\n\n// The number of columns change by resizing the window\nclass Error extends React.Component {\n    render() {\n        return (\n            <div>\n                <p>Page not found</p>\n                <Header />\n            </div>\n        )\n    }\n}\n\nexport default Error;","import React, { Component } from 'react';\nimport { Link } from 'react-router';\nimport '../day1/style.css'\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js'\nimport * as THREE from \"three\";\n\n// The number of columns change by resizing the window\nclass Day1 extends React.Component {\n    componentDidMount() {\n        // three.js\n        /**\n * Base\n */\n        // Canvas\n        const canvas = document.querySelector('canvas.webgl')\n\n        // Scene\n        const scene = new THREE.Scene()\n\n        //light\n        const lightColor = \"#ffffff\";\n        const intensity = 1;\n        const light = new THREE.DirectionalLight(lightColor, intensity);\n        light.position.set(-1, 2, 4);\n        scene.add(light);\n\n\n        /**\n         * Object\n         */\n\n        // load font\n        const loader = new THREE.FontLoader();\n        const font = loader.load(\n            // resource URL\n            './assets/day1/anthony.json',\n\n            // onLoad callback\n            function (font) {\n                const color = 0x0;\n\n                const mat = new THREE.MeshPhysicalMaterial({\n                    color: 0xffffff,\n                    emissive: 0x000000,\n                    transparent: true,\n                    opacity: 1,\n                    side: THREE.DoubleSide,\n                    roughness: 0,\n                    metalness: 0,\n                    reflectivity: 0,\n                    clearcoat: 1,\n                    clearcoatRoughness: 1,\n                });\n                // const mat = new THREE.MeshToonMaterial({\n                //     color: 0xf,\n                // })\n\n                const message = \"50 days of \\nimmersive web\";\n\n                // const shapes = font.generateShapes( message, 100 );\n                // const geometry = new THREE.ShapeGeometry( shapes );\n\n                const geometry = new THREE.TextGeometry(message, {\n                    font: font,\n                    size: 72,\n                    height: 8,\n                    curveSegments: 1,\n                    bevelEnabled: true,\n                    bevelThickness: 0.15,\n                    bevelSize: 0.3,\n                    bevelSegments: 5,\n                });\n\n                geometry.computeBoundingBox();\n\n                const xMid = - 0.5 * (geometry.boundingBox.max.x - geometry.boundingBox.min.x);\n\n                geometry.translate(xMid, 0, 0);\n\n                // make shape ( N.B. edge view not visible )\n\n                const text = new THREE.Mesh(geometry, mat);\n                text.position.y = 100;\n                text.position.z = -80;\n                text.rotation.x = -1.3;\n                scene.add(text);\n            },\n\n            // onProgress callback\n            function (xhr) {\n                console.log((xhr.loaded / xhr.total * 100) + '% loaded');\n            },\n\n            // onError callback\n            function (err) {\n                console.log('An error happened');\n            }\n        );\n\n        // water\n        scene.background = new THREE.Color(0xffffff);\n        scene.fog = new THREE.FogExp2(0xffffff, 0.0009);\n\n        const worldWidth = 128, worldDepth = 128;\n        let waterGeometry = new THREE.PlaneGeometry(20000, 20000, worldWidth - 1, worldDepth - 1);\n        waterGeometry.rotateX(- Math.PI / 2);\n        const position = waterGeometry.attributes.position;\n        for (let i = 0; i < position.count; i++) {\n\n            const y = 35 * Math.sin(i / 2);\n            position.setY(i, y);\n\n        }\n\n        // const texture = new THREE.TextureLoader().load('https://live.staticflickr.com/4066/4344198258_e647f9487b_b.jpg');\n        const texture = new THREE.TextureLoader().load('./assets/day1/texture.jpeg');\n        texture.wrapS = texture.wrapT = THREE.RepeatWrapping;\n        texture.repeat.set(5, 5);\n\n        let waterMaterial = new THREE.MeshBasicMaterial({ color: 0x555555, map: texture });\n        let water = new THREE.Mesh(waterGeometry, waterMaterial);\n        scene.add(water);\n\n        /**\n         * Sizes\n         */\n        const sizes = {\n            width: window.innerWidth,\n            height: window.innerHeight\n        }\n\n        // Listen to the resize event\n        window.addEventListener('resize', () => {\n            //update size for resize\n            sizes.width = window.innerWidth\n            sizes.height = window.innerHeight\n\n            //update camera\n            camera.aspect = sizes.width / sizes.height\n            camera.updateProjectionMatrix();\n\n            //update renderer\n            renderer.setSize(sizes.width, sizes.height) // see https://threejs.org/docs/index.html?q=updat#manual/en/introduction/How-to-update-things\n            renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2)); // change pixel ratio to reduce jaggies & limit it into 2(more than 2 becomes extremely slow)\n        })\n\n        window.addEventListener('dblclick', () => {\n\n            const fullscreenElement = document.fullscreenElement || document.webkitFullscreenElement //for safari\n\n            if (!fullscreenElement) {\n                if (canvas.requestFullscreen) {\n                    canvas.requestFullscreen(); // doesn't work on Safari\n                } else if (canvas.webkitRequestFullscreen) {\n                    canvas.webkitRequestFullscreen(); //for Safari\n                }\n\n            } else {\n                if (document.exitFullscreen) {\n                    document.exitFullscreen(); //not the canvas, it is document    \n                } else if (document.webkitExitFullscreen) {\n                    document.webkitExitFullscreen(); //for Safari\n                }\n\n            }\n        });\n        /**\n         * Camera\n         */\n        // Base camera\n        const camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 10000)\n        camera.position.set(0, 100, 1000);\n        scene.add(camera)\n\n\n        // Controls\n        const controls = new OrbitControls(camera, canvas)\n        controls.enableDamping = true\n\n        /**\n         * Renderer\n         */\n        const renderer = new THREE.WebGLRenderer({\n            canvas: canvas\n        })\n\n        renderer.setSize(sizes.width, sizes.height)\n\n        /**\n         * Animate\n         */\n        const clock = new THREE.Clock()\n\n        const tick = () => {\n            const delta = clock.getDelta();\n            const time = clock.getElapsedTime() * 10;\n\n            const position = waterGeometry.attributes.position;\n\n            for (let i = 0; i < position.count; i++) {\n\n                const y = 35 * Math.sin(i / 5 + (time + i) / 7);\n                position.setY(i, y);\n\n            }\n            position.needsUpdate = true;\n\n            // controls.update( delta );\n\n            const elapsedTime = clock.getElapsedTime()\n\n            // Update controls\n            controls.update()\n\n            // Render\n            renderer.setClearColor(0xffffff, 1);\n            renderer.render(scene, camera)\n\n            // Call tick again on the next frame\n            window.requestAnimationFrame(tick)\n        }\n\n        tick()\n    }\n    render() {\n        return (\n            <div>\n                <canvas class=\"webgl\"></canvas>\n            </div>\n        )\n    }\n}\n\nexport default Day1;","import React, { Component } from 'react';\nimport { Link } from 'react-router';\nimport '../day2/style.css'\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js'\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer.js';\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass.js';\nimport { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass.js';\nimport * as THREE from \"three\";\n\n// The number of columns change by resizing the window\nclass Day2 extends React.Component {\n    componentDidMount() {\n        //    insert three.js code\n        /**\n     * Base\n     */\n        // Canvas\n        const canvas = document.querySelector('canvas.webgl')\n\n        // Scene\n        const scene = new THREE.Scene()\n\n        /**\n         * Object\n         */\n\n        let mesh;\n        let geometry;\n        const group = new THREE.Group();\n        // const geometry = new THREE.TorusKnotGeometry( 1, 0.02, 8, 16 );\n        const material = new THREE.MeshBasicMaterial({ color: 0xffffff });\n        mesh = new THREE.Mesh(geometry, material);\n        scene.add(mesh);\n\n        for (let i = 0; i < 10; i++) {\n            geometry = new THREE.TorusKnotGeometry(0.5, 0.02, 8, 16, 10 + Math.floor(Math.random() * 10), 10 + Math.floor(Math.random() * 10));\n            mesh = new THREE.Mesh(geometry, material);\n            mesh.position.set(Math.floor(Math.random() * 3), Math.floor(Math.random() * 3), Math.floor(Math.random() * 3));\n            group.add(mesh);\n        }\n\n        scene.add(group);\n        group.position.set(0, 0, -1);\n        let params = {\n            exposure: 1,\n            bloomStrength: 1.5,\n            bloomThreshold: 0.1,\n            bloomRadius: 0\n        };\n\n        /**\n         * Sizes\n         */\n        const sizes = {\n            width: window.innerWidth,\n            height: window.innerHeight\n        }\n\n        /**\n         * Camera\n         */\n        // Base camera\n        const camera = new THREE.PerspectiveCamera(30, sizes.width / sizes.height, 1, 50)\n        camera.position.set(1, -3, 0);\n        scene.add(camera);\n        camera.lookAt(group);\n\n        // Controls\n        const controls = new OrbitControls(camera, canvas)\n        controls.enableDamping = true\n\n        // lights\n        scene.add(new THREE.AmbientLight(0x404040));\n        const pointLight = new THREE.PointLight(0xffffff, 1);\n        camera.add(pointLight);\n\n        /**\n         * Renderer\n         */\n        const renderer = new THREE.WebGLRenderer({\n            canvas: canvas,\n            antialias: true\n        })\n        renderer.toneMapping = THREE.ReinhardToneMapping;\n        renderer.setSize(sizes.width, sizes.height)\n\n        // RenderPass\n\n        const renderScene = new RenderPass(scene, camera);\n\n        const bloomPass = new UnrealBloomPass(new THREE.Vector2(sizes.innerWidth, sizes.innerHeight), 1.5, 0.4, 0.85);\n        bloomPass.threshold = params.bloomThreshold;\n        bloomPass.strength = params.bloomStrength;\n        bloomPass.radius = params.bloomRadius;\n\n        let composer = new EffectComposer(renderer);\n        composer.addPass(renderScene);\n        composer.addPass(bloomPass);\n\n        /**\n         * Animate\n         */\n        const clock = new THREE.Clock()\n        const scaleKF = new THREE.VectorKeyframeTrack('.scale', [0, 1, 2], [1, 1, 1, 2, 2, 2, 1, 1, 1]);\n        const clip = new THREE.AnimationClip('Action', 3, [scaleKF]);\n\n        // setup the THREE.AnimationMixer\n        let mixer = new THREE.AnimationMixer(mesh);\n\n        // create a ClipAction and set it to play\n        const clipAction = mixer.clipAction(clip);\n\n        //resize\n        // Listen to the resize event\n        window.addEventListener('resize', () => {\n            //update size for resize\n            sizes.width = window.innerWidth\n            sizes.height = window.innerHeight\n\n            //update camera\n            camera.aspect = sizes.width / sizes.height\n            camera.updateProjectionMatrix();\n\n            //update renderer\n            renderer.setSize(sizes.width, sizes.height) // see https://threejs.org/docs/index.html?q=updat#manual/en/introduction/How-to-update-things\n            renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2)); // change pixel ratio to reduce jaggies & limit it into 2(more than 2 becomes extremely slow)\n        })\n\n        window.addEventListener('dblclick', () => {\n\n            const fullscreenElement = document.fullscreenElement || document.webkitFullscreenElement //for safari\n\n            if (!fullscreenElement) {\n                if (canvas.requestFullscreen) {\n                    canvas.requestFullscreen(); // doesn't work on Safari\n                } else if (canvas.webkitRequestFullscreen) {\n                    canvas.webkitRequestFullscreen(); //for Safari\n                }\n\n            } else {\n                if (document.exitFullscreen) {\n                    document.exitFullscreen(); //not the canvas, it is document    \n                } else if (document.webkitExitFullscreen) {\n                    document.webkitExitFullscreen(); //for Safari\n                }\n\n            }\n        });\n\n        const tick = () => {\n            const delta = clock.getDelta();\n            const time = clock.getElapsedTime() * 10;\n\n            params.bloomStrength = 5 * Math.sin(time);\n            params.needsUpdate = true;\n\n            group.rotation.x += 0.01;\n            group.rotation.y += 0.01;\n\n            // Update controls\n            controls.update()\n\n            // Render\n            renderer.render(scene, camera)\n\n            // Call tick again on the next frame\n            window.requestAnimationFrame(tick)\n\n            composer.render();\n            clipAction.play();\n        }\n\n        tick()\n    }\n    render() {\n        return (\n            <div>\n                <canvas class=\"webgl\"></canvas>\n            </div>\n        )\n    }\n}\n\nexport default Day2;","import React, { Component } from 'react';\nimport { Link } from 'react-router';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js'\nimport { DirectionalLight } from 'three'\nimport * as THREE from \"three\";\nimport '../day3/style.css'\n\n// The number of columns change by resizing the window\nclass Day3 extends React.Component {\n    componentDidMount() {\n    //    insert three.js code\n    // Params\nconst parameters = {\n    meshColor: 0x97cdae,\n    lightColor: 0xffffff,\n    planeColor: 0x313866,\n    deviceAlpha:0,\n    deviceBeta:0,\n    deviceGamma: 0,\n}\n\n/**\n * Base\n */\n// Canvas\nconst canvas = document.querySelector('canvas.webgl')\n\n// Scene\nconst scene = new THREE.Scene()\nscene.background = new THREE.Color( 0xf1d3d3 );\n\n/**\n * Object\n */\n// const geometry = new THREE.BoxGeometry(10, 10, 10)\nconst geometry = new THREE.TorusKnotGeometry( 5, 1.2, 64, 16, 1, 2 );\nconst material = new THREE.MeshToonMaterial({ color: parameters.meshColor })\nconst mesh = new THREE.Mesh(geometry, material)\nmesh.castShadow = true;\nmesh.receiveShadow = true;\nscene.add(mesh)\nmesh.position.set(0,5,3);\n\n// Light\n// const dirLight = new THREE.DirectionalLight( parameters.lightColor, 0.7 );\nconst dirLight = new THREE.DirectionalLight( 0xffffff, 0.7 );\ndirLight.castShadow = true; // default false\ndirLight.position.set(0,60,5);\n\n// adjust dirLight size\ndirLight.shadowCameraLeft = -10;\ndirLight.shadowCameraRight = 10;\ndirLight.shadowCameraTop = 10;\ndirLight.shadowCameraBottom = -10;\n\nscene.add( dirLight );\n\n// const helper = new THREE.CameraHelper( dirLight.shadow.camera );\n// scene.add( helper );\n\n\n\nconst ambLight = new THREE.AmbientLight(0xffffff);\nscene.add( ambLight );\n\n\n/**\n * Sizes\n */\nconst sizes = {\n    width: window.innerWidth,\n    height: window.innerHeight\n}\n\nwindow.addEventListener('resize', () =>\n{\n    // Update sizes\n    sizes.width = window.innerWidth\n    sizes.height = window.innerHeight\n\n    // Update camera\n    camera.aspect = sizes.width / sizes.height\n    camera.updateProjectionMatrix()\n\n    // Update renderer\n    renderer.setSize(sizes.width, sizes.height)\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\n})\n\n/**\n * Fullscreen\n */\nwindow.addEventListener('dblclick', () =>\n{\n    const fullscreenElement = document.fullscreenElement || document.webkitFullscreenElement\n\n    if(!fullscreenElement)\n    {\n        if(canvas.requestFullscreen)\n        {\n            canvas.requestFullscreen()\n        }\n        else if(canvas.webkitRequestFullscreen)\n        {\n            canvas.webkitRequestFullscreen()\n        }\n    }\n    else\n    {\n        if(document.exitFullscreen)\n        {\n            document.exitFullscreen()\n        }\n        else if(document.webkitExitFullscreen)\n        {\n            document.webkitExitFullscreen()\n        }\n    }\n})\n\n// Plane for receiving shadows\nconst planeGeometry = new THREE.PlaneBufferGeometry(100, 100);\nconst planeMaterial = new THREE.MeshToonMaterial({ color: parameters.planeColor});\n// weird box appears in the shadows?? don't know why\n// const planeMaterial = new THREE.MeshToonMaterial({ color: 0x313866, side: THREE.DoubleSide}); \nconst plane = new THREE.Mesh(planeGeometry, planeMaterial);\nscene.add(plane);\nplane.rotateX(-2);\nplane.position.set(0,-20,0);\n\n// Shadow on plane\nplane.castShadow = true;\nplane.receiveShadow = true;\n\n/**\n * Camera\n */\n// Base camera\nconst camera = new THREE.PerspectiveCamera(75, sizes.width / sizes.height, 0.1, 100)\ncamera.position.set(0,20,30);\ncamera.lookAt(plane.position);\nscene.add(camera)\n\n// Controls\nconst controls = new OrbitControls(camera, canvas)\ncontrols.enableDamping = true\n\n/**\n * Renderer\n */\nconst renderer = new THREE.WebGLRenderer({\n    canvas: canvas\n})\nrenderer.setSize(sizes.width, sizes.height)\nrenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\n\n// Shadows\nrenderer.shadowMap.enabled = true;\nrenderer.shadowMap.type = THREE.PCFSoftShadowMap; // default THREE.PCFShadowMap\n\n// axisHelper\n// const axesHelper = new THREE.AxesHelper( 20 );\n// scene.add( axesHelper );\n\n// dat.gui\n\n// const gui = new dat.GUI({autoPlace: true});\n// gui.domElement.id = 'gui';\n// let folder = gui.addFolder(`Colors`)\n// gui\n//     .addColor(parameters, 'meshColor')\n//     .onChange(() =>\n//     {\n//         material.color.set(parameters.meshColor)\n//     })\n// gui\n//     .addColor(parameters, 'lightColor')\n//     .onChange(() =>\n//     {\n//         material.color.set(parameters.lightColor)\n//     })\n\n/**\n * Animate\n */\nconst clock = new THREE.Clock()\n\nconst getPermisson = e => {\n    e.preventDefault();\n    // Request permission for iOS 13+ devices\n    if (\n        DeviceOrientationEvent &&\n        typeof DeviceOrientationEvent.requestPermission === \"function\"\n      ) {\n        console.log(\"click event received!!\")\n        DeviceOrientationEvent.requestPermission();\n    }\n}\n\nconst rotate = e => {\n    console.log(\"orientation event received!\")\n    var x = e.beta;\n    var y = e.alpha;\n    var z = e.gamma;\n\n    // Because we don't want to have the device upside down\n    // We constrain the x value to the range [-90,90]\n    if (y > 90) {\n        y = 90;\n    }\n    if (y < -90) {\n        y = -90;\n    }\n\n    if (z > 90) {\n        z = 90;\n    }\n    if (z < -90) {\n        z = -90;\n    }\n\n    parameters.deviceBeta = x;\n    parameters.deviceAlpha = y;\n    parameters.deviceGamma = z;\n}\n\n// get device orientation when button is clicked\nlet is_running = false;\nlet button = document.getElementById(\"start\");\n\nbutton.onclick = function(e) {\n    e.preventDefault();\n\n    if (is_running){\n        scene.background = new THREE.Color( 0xf1d3d3 );\n        button.innerText = 'start detection';\n        // iOS permission\n        window.removeEventListener(\"click\", getPermisson);\n        window.removeEventListener(\"touchstart\", getPermisson);\n        // device orientation\n        window.removeEventListener(\"deviceorientation\", rotate, true);\n        is_running = false;\n      }else{\n        scene.background = new THREE.Color( 0xF2E7B3 );\n        button.innerText = 'stop detection';\n        // iOS permission\n        window.addEventListener(\"click\", getPermisson);\n        window.addEventListener(\"touchstart\", getPermisson);\n        // device orientation\n        window.addEventListener(\"deviceorientation\", rotate, true);\n        is_running = true;\n      }\n\n}\nconst tick = () =>\n{\n    // window.addEventListener(\"deviceorientation\", rotate, true);\n    const elapsedTime = clock.getElapsedTime()\n\n    // Update controls\n    controls.update()\n\n    // Render\n    renderer.render(scene, camera)\n\n    // Rotation\n    mesh.rotation.x = parameters.deviceBeta * Math.PI / 180;\n    mesh.rotation.y = parameters.deviceAlpha * Math.PI / 180;\n    mesh.rotation.z = - parameters.deviceGamma * Math.PI / 180;\n    \n\n    // Call tick again on the next frame\n    window.requestAnimationFrame(tick)\n}\n\ntick()\n\n    }\n    render() {\n        return (\n            <div>\n                <div id = \"container\">\n                    <p id =\"description\">press button and turn your phone around</p>\n                    <button id=\"start\" className=\"btn\" href=\"#\" role=\"button\">start detection</button>\n                    <canvas className=\"webgl\"></canvas>\n                </div>            \n            </div>\n        )\n    }\n}\n\nexport default Day3;","import React, { Component } from 'react';\nimport { Link } from 'react-router';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js'\nimport * as THREE from \"three\";\nimport '../day4/style.css'\n\n// The number of columns change by resizing the window\nclass Day4 extends React.Component {\n    componentDidMount() {\n    //    insert three.js code\n    const parameters = {\n        // backgroundColor: 0x232323,\n        opacity: 0.8,\n        backgroundColor: 0xe8e8e8,\n        particleColor: 0x7b83b0\n    }\n    \n    // loading manager\n    const loadingManager = new THREE.LoadingManager();\n    \n    loadingManager.onStart = () => {\n        console.log('onStart')\n    }\n    \n    loadingManager.onLoad = () => {\n        console.log('onLoad')\n    }\n    \n    loadingManager.onProgress = () => {\n        console.log('onProgress')\n    }\n    \n    loadingManager.onError = () => {\n        console.log('onError')\n    }\n    \n    const textureLoader = new THREE.TextureLoader(loadingManager);\n    // load multiple textures\n    const textureCount = 9;\n    let particlesTextureArray = []\n    for (let i=0; i<textureCount; i++) {\n        particlesTextureArray.push(textureLoader.load(`./assets/day4/textures/particles/${i}.png`));\n        console.log(particlesTextureArray);\n    }\n    \n    \n    // Canvas\n    const canvas = document.querySelector('canvas.webgl')\n    \n    // Scene\n    const scene = new THREE.Scene()\n    // scene.background = new THREE.Color( parameters.backgroundColor );\n    \n    // Particles\n    \n    // Geometry\n    let particlesGeometryArray = []\n    const count = 1000 // number of particles\n    for (let i=0; i<textureCount; i++) {\n        particlesGeometryArray.push(new THREE.BufferGeometry());\n    \n        //making a custom geometry using BufferGeometry\n        //positions\n        const positions = new Float32Array(count * 3) // 3 positions: x, y, z\n        for (let j=0; j<count * 3 ; j++) {\n            positions[j] = (Math.random() - 0.5) * 80; //-.5 to -.5 for placing in center\n        }\n        particlesGeometryArray[i].setAttribute(\n            'position', \n            new THREE.BufferAttribute(positions, 3) //1 vertex contains 3 values\n        );\n    \n        //colors\n        const colors = new Float32Array(count * 3) // r, g, b\n        for (let i=0; i<count * 3 ; i++) {\n            colors[i] = 0.6 //note: color is not 0~255, its 0~1\n        }\n        particlesGeometryArray[i].setAttribute(\n            'color', \n            new THREE.BufferAttribute(colors, 3)\n        )   \n    }\n    \n    //Material\n    let particlesMaterialArray = []\n    for (let i=0; i<textureCount; i++) {\n        particlesMaterialArray.push(new THREE.PointsMaterial());\n        particlesMaterialArray[i].size = 0.3;\n        particlesMaterialArray[i].sizeAttenuation = true;\n        particlesMaterialArray[i].color = new THREE.Color(parameters.particleColor); //you can still add a 'base' color even when you use vertexColors\n    \n        //make the black parts transparent\n        particlesMaterialArray[i].transparent = true\n        particlesMaterialArray[i].opacity = parameters.opacity;\n    \n        //load texture\n        particlesMaterialArray[i].map = particlesTextureArray[i]\n        particlesMaterialArray[i].alphaMap = particlesTextureArray[i]\n    \n        // Fixing WebGL bug: detecting which particle is front - pick one\n        particlesMaterialArray[i].depthWrite = false; //might have bugs but best solution for now. Always test between these 3 methods\n        particlesMaterialArray[i].blending = THREE.AdditiveBlending //colors add(blend) when they overlay, but can impact performance\n        particlesMaterialArray[i].vertexColors = true //different colors for each particle\n    \n    }\n    \n    //Particles\n    for (let i=0; i<textureCount; i++) {\n        let particles = new THREE.Points(particlesGeometryArray[i], particlesMaterialArray[i])\n        scene.add(particles)\n    }\n    \n    /**\n     * Sizes\n     */\n    const sizes = {\n        width: window.innerWidth,\n        height: window.innerHeight\n    }\n    \n    window.addEventListener('resize', () =>\n    {\n        // Update sizes\n        sizes.width = window.innerWidth\n        sizes.height = window.innerHeight\n    \n        // Update camera\n        camera.aspect = sizes.width / sizes.height\n        camera.updateProjectionMatrix()\n    \n        // Update renderer\n        renderer.setSize(sizes.width, sizes.height)\n        renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\n    })\n    \n    /**\n     * Camera\n     */\n    // Base camera\n    const camera = new THREE.PerspectiveCamera(100, sizes.width / sizes.height, 0.1, 100)\n    camera.position.z = 2\n    scene.add(camera)\n    \n    // Controls\n    const controls = new OrbitControls(camera, canvas)\n    controls.enableDamping = true\n    \n    /**\n     * Renderer\n     */\n    const renderer = new THREE.WebGLRenderer({\n        canvas: canvas,\n        alpha: true,\n    })\n    renderer.setSize(sizes.width, sizes.height)\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\n    renderer.setClearColor(0x000000, 0);\n    \n    /**\n     * Animate\n     */\n    const clock = new THREE.Clock()\n    \n    const tick = () =>\n    {\n        const elapsedTime = clock.getElapsedTime()\n    \n        //Update particles\n        // particles.rotation.y = elapsedTime * 0.2 //animate whole thing\n        for (let j=0; j<textureCount; j++) {\n            for (let i=0; i < count; i++) {\n                const i3 = i * 3\n                const x = particlesGeometryArray[j].attributes.position.array[i3 + 0] //x position of particle\n                particlesGeometryArray[j].attributes.position.array[i3 + 1] = 2*j*(Math.sin((elapsedTime+10)/60))*Math.sin((elapsedTime+10)/16 + j/3) // y position of each particle\n            } //this method is inefficient performance-wise. You should use a custom shader for complex animation\n            // Particles need update\n            particlesGeometryArray[j].attributes.position.needsUpdate = true\n        }\n    \n    \n        // Update controls\n        controls.update()\n    \n        // Render\n        renderer.render(scene, camera)\n    \n        // Call tick again on the next frame\n        window.requestAnimationFrame(tick)\n    }\n    \n    tick()\n\n    }\n    render() {\n        return (\n            <div>\n                <div id = \"container\">\n                    <canvas className=\"webgl\"></canvas>\n                </div>            \n            </div>\n        )\n    }\n}\n\nexport default Day4;","import React, { Component } from 'react';\nimport { Link } from 'react-router';\nimport * as THREE from \"three\";\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js'\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer.js'\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass'\nimport { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass'\nimport { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass'\nimport { GammaCorrectionShader } from 'three/examples/jsm/shaders/GammaCorrectionShader' //for correcting sRGB encoding issue\nimport { SMAAPass } from 'three/examples/jsm/postprocessing/SMAAPass' //for antialiasing\nimport * as dat from 'dat.gui'\n\n// The number of columns change by resizing the window\nclass Day5 extends React.Component {\n    componentDidMount() {\n        //    insert three.js code\n        /**\n      * Base\n      */\n        // dat.gui\n        const gui = new dat.GUI()\n\n        // Canvas\n        const canvas = document.querySelector('canvas.webgl')\n\n        // Scene\n        const scene = new THREE.Scene()\n        scene.background = new THREE.Color('white');\n\n        // loader\n        const textureLoader = new THREE.TextureLoader()\n\n        /**\n         * Update all materials\n         */\n        const updateAllMaterials = () => {\n            scene.traverse((child) => {\n                if (child instanceof THREE.Mesh && child.material instanceof THREE.MeshStandardMaterial) {\n                    child.material.envMapIntensity = 2.5\n                    child.material.needsUpdate = true\n                    child.castShadow = true\n                    child.receiveShadow = true\n                }\n            })\n        }\n\n        /**\n         * Lights\n         */\n        const directionalLight = new THREE.DirectionalLight('#ffffff', 2)\n        directionalLight.castShadow = true\n        directionalLight.shadow.mapSize.set(1024, 1024)\n        directionalLight.shadow.camera.far = 15\n        directionalLight.shadow.normalBias = 0.05\n        directionalLight.position.set(0, 4, 1)\n        scene.add(directionalLight)\n\n        /**\n         * Object\n         */\n        let pulseSize = 0;\n        const geometry = new THREE.TorusKnotGeometry(0.5, 0.13, 100, 16, 1, 3);\n        const material = new THREE.MeshPhongMaterial({ color: new THREE.Color('lightsteelblue') })\n        const mesh = new THREE.Mesh(geometry, material)\n        scene.add(mesh)\n\n        /**\n         * Sizes\n         */\n        const sizes = {\n            width: window.innerWidth,\n            height: window.innerHeight\n        }\n\n        window.addEventListener('resize', () => {\n            // Update sizes\n            sizes.width = window.innerWidth\n            sizes.height = window.innerHeight\n\n            // Update camera\n            camera.aspect = sizes.width / sizes.height\n            camera.updateProjectionMatrix()\n\n            // Update renderer\n            renderer.setSize(sizes.width, sizes.height)\n            renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\n\n            // Update effectcomposer\n            effectComposer.setSize(sizes.width, sizes.height)\n            effectComposer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\n        })\n\n        /**\n         * Fullscreen\n         */\n        window.addEventListener('dblclick', () => {\n            const fullscreenElement = document.fullscreenElement || document.webkitFullscreenElement\n\n            if (!fullscreenElement) {\n                if (canvas.requestFullscreen) {\n                    canvas.requestFullscreen()\n                }\n                else if (canvas.webkitRequestFullscreen) {\n                    canvas.webkitRequestFullscreen()\n                }\n            }\n            else {\n                if (document.exitFullscreen) {\n                    document.exitFullscreen()\n                }\n                else if (document.webkitExitFullscreen) {\n                    document.webkitExitFullscreen()\n                }\n            }\n        })\n\n        /**\n         * Camera\n         */\n        // Base camera\n        const camera = new THREE.PerspectiveCamera(75, sizes.width / sizes.height, 0.1, 100)\n        camera.position.z = 3\n        scene.add(camera)\n\n        // Controls\n        const controls = new OrbitControls(camera, canvas)\n        controls.enableDamping = true\n\n        /**\n         * Renderer\n         */\n        const renderer = new THREE.WebGLRenderer({\n            canvas: canvas,\n            antialias: true\n        })\n        renderer.setSize(sizes.width, sizes.height)\n        renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\n\n        renderer.shadowMap.enabled = true\n        renderer.shadowMap.type = THREE.PCFShadowMap\n        renderer.physicallyCorrectLights = true\n        renderer.outputEncoding = THREE.sRGBEncoding\n        renderer.toneMapping = THREE.ReinhardToneMapping\n        renderer.toneMappingExposure = 1.5\n        renderer.setSize(sizes.width, sizes.height)\n        renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\n\n        // postprocessing\n\n        let renderTargetClass = null;\n        if (renderer.getPixelRatio() === 1 && renderer.capabilities.isWebGL2) {\n            // use WebGLMultisampleRenderTarget\n            renderTargetClass = THREE.WebGLMultisampleRenderTarget\n        } else {\n            // Safari(doesn't support WebGL2)\n            // or retina screens (doesn't need antialiasing)\n            renderTargetClass = THREE.WebGLRenderTarget\n        }\n\n        // render target for anti-aliasing support (WebGL2 - doesn't work on Safari)\n        const renderTarget = new renderTargetClass(\n            800,\n            600,\n            {\n                minFilter: THREE.LinearFilter,\n                magFilter: THREE.LinearFilter,\n                format: THREE.RGBAFormat\n            }\n        )\n\n        // effects\n        const effectComposer = new EffectComposer(renderer, renderTarget) // doesn't work on Safari\n        effectComposer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\n        effectComposer.setSize(sizes.width, sizes.height)\n\n        const renderPass = new RenderPass(scene, camera)\n        effectComposer.addPass(renderPass)\n\n        // threshold pass (custom effect)\n        const ThresholdShader = {\n            uniforms: {\n                tDiffuse: { value: null }, //lets EffectComposer update texture automatically\n                uTint: { value: null },\n                uBrightness: { value: null }\n            },\n            vertexShader: `\n        varying vec2 vUv;\n\n        void main()\n        {\n            \n            gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n            vUv = uv;\n        }\n    `,\n            fragmentShader: `\n        uniform sampler2D tDiffuse; // texture of previous passes\n        uniform vec3 uTint;\n        uniform float uBrightness;\n\n        varying vec2 vUv; //receive uv from vertex shader\n\n        void main()\n        {\n            vec4 color = texture2D(tDiffuse, vUv);\n            float greyColor = clamp(0.2126 * color.r + 0.7152 * color.g * 0.0722 * color.b + uBrightness, 0.0, 1.0);\n            if (greyColor > 0.0 && greyColor <= 0.05) greyColor = 0.02;\n            if (greyColor > 0.05 && greyColor <= 0.1) greyColor = 0.08;\n            if (greyColor > 0.1) greyColor = 1.0;\n            \n\n            gl_FragColor = vec4(vec3(greyColor), 1.0);\n        }\n    `,\n        }\n\n        const thresholdPass = new ShaderPass(ThresholdShader)\n        thresholdPass.material.uniforms.uTint.value = new THREE.Vector3(0, 0, 0);\n        thresholdPass.enabled = true;\n        thresholdPass.material.uniforms.uBrightness.value = 0.005;\n        gui.add(thresholdPass, 'enabled').name('thresholdPass')\n        // gui.add(thresholdPass.material.uniforms.uBrightness, 'value').min(0).max(1).step(0.001).name('brightness')\n        effectComposer.addPass(thresholdPass)\n\n\n        const unrealBloomPass = new UnrealBloomPass()\n        unrealBloomPass.enabled = true\n        unrealBloomPass.strength = 0.54\n        unrealBloomPass.radius = 0.82\n        effectComposer.addPass(unrealBloomPass)\n        gui.add(unrealBloomPass, 'enabled').name('unrealBloomPass')\n\n        // add color correction at the last\n        const gammaCorrectionPass = new ShaderPass(GammaCorrectionShader)\n        effectComposer.addPass(gammaCorrectionPass)\n\n        // (last last) if pixel ratio is 1 and browser doesn't support WebGL2,\n        // add SMAA pass for anti aliasing\n        if (renderer.getPixelRatio() === 1 && !renderer.capabilities.isWebGL2) {\n            const smaaPass = new SMAAPass()\n            effectComposer.addPass(smaaPass)\n        }\n\n\n        /**\n         * Animate\n         */\n        const clock = new THREE.Clock()\n\n        const tick = () => {\n            const elapsedTime = clock.getElapsedTime()\n\n            mesh.rotation.y = elapsedTime * Math.PI / 2;\n            unrealBloomPass.radius = 0.7 + Math.sin(elapsedTime * 0.8) * 0.2;\n            pulseSize = Math.sin(elapsedTime * 0.8);\n            mesh.scale.x = 1 + pulseSize * 0.2;\n            mesh.scale.y = 1 + pulseSize * 0.2;\n            mesh.scale.z = 1 + pulseSize * 0.2;\n\n            // Update controls\n            controls.update()\n\n            // Render\n            // renderer.render(scene, camera)\n            // postprocessing\n            effectComposer.render()\n\n            // update uniform time for passes\n            // displacementPass.material.uniforms.uTime.value = elapsedTime;\n\n            // Call tick again on the next frame\n            window.requestAnimationFrame(tick)\n        }\n\n        tick()\n    }\n    render() {\n        return (\n            <div>\n                <div id=\"container\">\n                    <canvas className=\"webgl\"></canvas>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Day5;","import React, { Component } from 'react';\nimport { Link } from 'react-router';\nimport * as THREE from \"three\";\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js'\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer.js'\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass'\nimport { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass'\nimport { GammaCorrectionShader } from 'three/examples/jsm/shaders/GammaCorrectionShader' //for correcting sRGB encoding issue\nimport { SMAAPass } from 'three/examples/jsm/postprocessing/SMAAPass' //for antialiasing\nimport * as dat from 'dat.gui'\n\n// The number of columns change by resizing the window\nclass Day6 extends React.Component {\n    componentDidMount() {\n\n        /**\n         * Base\n         */\n        // dat.gui\n        // const gui = new dat.GUI()\n\n        // Canvas\n        const canvas = document.querySelector('canvas.webgl')\n\n        // Scene\n        const scene = new THREE.Scene()\n        scene.background = new THREE.Color('white');\n\n        // loader\n        const textureLoader = new THREE.TextureLoader()\n\n        /**\n         * Update all materials\n         */\n        const updateAllMaterials = () => {\n            scene.traverse((child) => {\n                if (child instanceof THREE.Mesh && child.material instanceof THREE.MeshStandardMaterial) {\n                    child.material.envMapIntensity = 2.5\n                    child.material.needsUpdate = true\n                    child.castShadow = true\n                    child.receiveShadow = true\n                }\n            })\n        }\n\n        /**\n         * Lights\n         */\n        const directionalLight = new THREE.DirectionalLight('#ffffff', 2)\n        directionalLight.castShadow = true\n        directionalLight.shadow.mapSize.set(1024, 1024)\n        directionalLight.shadow.camera.far = 15\n        directionalLight.shadow.normalBias = 0.05\n        directionalLight.position.set(0, 4, 1)\n        scene.add(directionalLight)\n\n        /**\n         * Object\n         */\n        let pulseSize = 0;\n        const geometry = new THREE.TorusKnotGeometry(1.0, 0.16, 120, 24, 3, 21);\n        // const geometry = new THREE.TorusKnotGeometry( 1.0, 0.2, 60, 24, 3, 21 );\n        const material = new THREE.MeshPhongMaterial({ color: new THREE.Color('lightsteelblue') })\n        const mesh = new THREE.Mesh(geometry, material)\n        scene.add(mesh)\n\n        /**\n         * Sizes\n         */\n        const sizes = {\n            width: window.innerWidth,\n            height: window.innerHeight\n        }\n\n        window.addEventListener('resize', () => {\n            // Update sizes\n            sizes.width = window.innerWidth\n            sizes.height = window.innerHeight\n\n            // Update camera\n            camera.aspect = sizes.width / sizes.height\n            camera.updateProjectionMatrix()\n\n            // Update renderer\n            renderer.setSize(sizes.width, sizes.height)\n            renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\n\n            // Update effectcomposer\n            effectComposer.setSize(sizes.width, sizes.height)\n            effectComposer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\n\n            bayerPass.material.uniforms.uResolution.value = new THREE.Vector2(sizes.width, sizes.height);\n        })\n\n        /**\n         * Fullscreen\n         */\n        window.addEventListener('dblclick', () => {\n            const fullscreenElement = document.fullscreenElement || document.webkitFullscreenElement\n\n            if (!fullscreenElement) {\n                if (canvas.requestFullscreen) {\n                    canvas.requestFullscreen()\n                }\n                else if (canvas.webkitRequestFullscreen) {\n                    canvas.webkitRequestFullscreen()\n                }\n            }\n            else {\n                if (document.exitFullscreen) {\n                    document.exitFullscreen()\n                }\n                else if (document.webkitExitFullscreen) {\n                    document.webkitExitFullscreen()\n                }\n            }\n        })\n\n        /**\n         * Camera\n         */\n        // Base camera\n        const camera = new THREE.PerspectiveCamera(75, sizes.width / sizes.height, 0.1, 100)\n        camera.position.z = 3\n        scene.add(camera)\n\n        // Controls\n        const controls = new OrbitControls(camera, canvas)\n        controls.enableDamping = true\n\n        /**\n         * Renderer\n         */\n        const renderer = new THREE.WebGLRenderer({\n            canvas: canvas,\n            antialias: true\n        })\n        renderer.setSize(sizes.width, sizes.height)\n        renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\n\n        renderer.shadowMap.enabled = true\n        renderer.shadowMap.type = THREE.PCFShadowMap\n        renderer.physicallyCorrectLights = true\n        renderer.outputEncoding = THREE.sRGBEncoding\n        renderer.toneMapping = THREE.ReinhardToneMapping\n        renderer.toneMappingExposure = 1.5\n        renderer.setSize(sizes.width, sizes.height)\n        renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\n\n        // postprocessing\n\n        let renderTargetClass = null;\n        if (renderer.getPixelRatio() === 1 && renderer.capabilities.isWebGL2) {\n            // use WebGLMultisampleRenderTarget\n            renderTargetClass = THREE.WebGLMultisampleRenderTarget\n        } else {\n            // Safari(doesn't support WebGL2)\n            // or retina screens (doesn't need antialiasing)\n            renderTargetClass = THREE.WebGLRenderTarget\n        }\n\n        // render target for anti-aliasing support (WebGL2 - doesn't work on Safari)\n        const renderTarget = new renderTargetClass(\n            800,\n            600,\n            {\n                minFilter: THREE.LinearFilter,\n                magFilter: THREE.LinearFilter,\n                format: THREE.RGBAFormat\n            }\n        )\n\n        // effects\n        const effectComposer = new EffectComposer(renderer, renderTarget) // doesn't work on Safari\n        effectComposer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\n        effectComposer.setSize(sizes.width, sizes.height)\n\n        const renderPass = new RenderPass(scene, camera)\n        effectComposer.addPass(renderPass)\n\n        // bayer dithering shader\n        const bayerShader = {\n            uniforms: {\n                tDiffuse: { value: null }, //lets EffectComposer update texture automatically\n                uTint: { value: null },\n                uBrightness: { value: null },\n                uResolution: { value: new THREE.Vector2(sizes.width, sizes.height) }\n            },\n            vertexShader: `\n                varying vec2 vUv;\n\n                void main()\n                {        \n                    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.);\n                    vUv = uv;\n                }\n            `,\n            fragmentShader: `\n                uniform sampler2D tDiffuse; // texture of previous passes\n                uniform float uBrightness;\n                uniform vec2 uResolution;\n                \n                varying vec2 vUv; //receive uv from vertex shader\n                \n                // from https://thebookofshaders.com/10/\n                float random (vec2 st) {\n                    return fract(sin(dot(st.xy,\n                                        vec2(12.9898,78.233)))*\n                        43758.5453123);\n                }\n                \n                // pseudomatrix from from https://github.com/hughsk/glsl-dither/blob/master/4x4.glsl\n                // bayer 4x4 dithering threshold\n                float dither4x4limit (vec2 position, float brightness) {\n                int x = int(mod(position.x, 4.0));\n                int y = int(mod(position.y, 4.0));\n                int index = x + y * 4;\n                float limit = 0.0;\n                \n                if (x < 8) {\n                    if (index == 0) limit = 0.0625;\n                    if (index == 1) limit = 0.5625;\n                    if (index == 2) limit = 0.1875;\n                    if (index == 3) limit = 0.6875;\n                    if (index == 4) limit = 0.8125;\n                    if (index == 5) limit = 0.3125;\n                    if (index == 6) limit = 0.9375;\n                    if (index == 7) limit = 0.4375;\n                    if (index == 8) limit = 0.25;\n                    if (index == 9) limit = 0.75;\n                    if (index == 10) limit = 0.125;\n                    if (index == 11) limit = 0.625;\n                    if (index == 12) limit = 1.0;\n                    if (index == 13) limit = 0.5;\n                    if (index == 14) limit = 0.875;\n                    if (index == 15) limit = 0.375;\n                }\n                \n                return limit;\n                }\n                \n                void main()\n                {\n                    float ditheredColor;\n                    vec4 color = texture2D(tDiffuse, vUv); \n                    float greyColor = clamp(0.2126 * color.r + 0.7152 * color.g * 0.0722 * color.b + uBrightness, 0.0, 1.0); \n                \n                    vec2 st = gl_FragCoord.xy/uResolution.xy * vec2(0.5); //I don't know why but resolution gets weird in react\n                    float rnd = random( st );\n                \n                \n                    float bayerThreshold = dither4x4limit(gl_FragCoord.xy, greyColor);\n                    float rndThreshold = 0.04;\n                \n                    if (st.x < 0.5) { //bayer dithering\n                    if (greyColor > 1.0 - bayerThreshold - 0.72) {\n                        ditheredColor = 0.95;\n                    } else {\n                        ditheredColor = 0.05;\n                    };\n                    } else { //random noise dithering\n                    if (greyColor + rnd - rndThreshold > rndThreshold) {\n                        ditheredColor = 0.05;\n                    } else {\n                        ditheredColor = 0.95;\n                    };\n                    }\n                \n                    gl_FragColor = vec4(vec3(ditheredColor), 1.0);\n                    // gl_FragColor = vec4(vec3(vUv, 0), 1.0);\n                }\n            `,\n        }\n\n        const bayerPass = new ShaderPass(bayerShader)\n        bayerPass.material.uniforms.uTint.value = new THREE.Vector3(0, 0, 0);\n        bayerPass.enabled = true;\n        bayerPass.material.uniforms.uBrightness.value = 0.01;\n        // gui.add(bayerPass,'enabled').name('bayerDithering')\n        // gui.add(bayerPass.material.uniforms.uBrightness, 'value').min(0).max(1).step(0.001).name('brightness')\n        effectComposer.addPass(bayerPass)\n\n        // add color correction at the last\n        const gammaCorrectionPass = new ShaderPass(GammaCorrectionShader)\n        effectComposer.addPass(gammaCorrectionPass)\n\n        // (last last) if pixel ratio is 1 and browser doesn't support WebGL2,\n        // add SMAA pass for anti aliasing\n        if (renderer.getPixelRatio() === 1 && !renderer.capabilities.isWebGL2) {\n            const smaaPass = new SMAAPass()\n            effectComposer.addPass(smaaPass)\n        }\n\n\n        /**\n         * Animate\n         */\n        const clock = new THREE.Clock()\n\n        const tick = () => {\n            const elapsedTime = clock.getElapsedTime()\n\n            mesh.rotation.y = elapsedTime * Math.PI / 2.4;\n            // pulseSize = Math.sin(elapsedTime * 0.8);\n            // mesh.scale.x = 1 + pulseSize * 0.2;\n            // mesh.scale.y = 1 + pulseSize * 0.2;\n            // mesh.scale.z = 1 + pulseSize * 0.2;\n\n            // Update controls\n            controls.update()\n\n            // Render\n            // renderer.render(scene, camera)\n            // postprocessing\n            effectComposer.render()\n\n            // update uniform time for passes\n            // displacementPass.material.uniforms.uTime.value = elapsedTime;\n\n            // Call tick again on the next frame\n            window.requestAnimationFrame(tick)\n        }\n\n        tick()\n    }\n    render() {\n        return (\n            <div>\n                <div id=\"container\">\n                    <canvas className=\"webgl\"></canvas>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Day6;","import logo from './logo.svg';\nimport './App.css';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\n\nimport Home from './Pages/Home.js'\nimport About from './Pages/About.js'\nimport Page from './Pages/Page.js'\nimport Error from './Pages/Error.js'\nimport Day1 from './Pages/Day1.js'\nimport Day2 from './Pages/Day2.js'\nimport Day3 from './Pages/Day3.js'\nimport Day4 from './Pages/Day4.js'\nimport Day5 from './Pages/Day5.js'\nimport Day6 from './Pages/Day6.js'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Switch>\n        <Route path='/' component={Home} exact />\n        <Route path=\"/about\" component={About} />\n        <Route path=\"/page\" component={Page} />\n        <Route path=\"/day1\" component={Day1} />\n        <Route path=\"/day2\" component={Day2} />\n        <Route path=\"/day3\" component={Day3} />\n        <Route path=\"/day4\" component={Day4} />\n        <Route path=\"/day5\" component={Day5} />\n        <Route path=\"/day6\" component={Day6} />\n        <Route component={Error} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}